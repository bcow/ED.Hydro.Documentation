[
["index.html", "Calculating ED Hydro Parameter Priors Documentation", " Calculating ED Hydro Parameter Priors Betsy Cowdery 2020-06-17 Documentation So far this covers how I calculated all the priors. It may ultimately show how the priors compare to the observed data (and the results of a meta analysis given the PFTs we’re interested in.) "],
["setup.html", "Setup Choosing PFTs 0.1 PFT: ED_Tropical_Hydro", " Setup ## Warning: Unknown columns: `BETY_prior_id` ## [1] &quot;leaf_psi_tlp&quot; &quot;wood_psi_tlp&quot; &quot;rwc_tlp_wood&quot; &quot;leaf_density&quot; ## [5] &quot;leaf_psi_min&quot; &quot;leaf_water_cap&quot; &quot;wood_Kexp&quot; &quot;wood_psi_min&quot; ## [9] &quot;wood_water_cap&quot; ED_name Christoffersen_name BETY_variable_id ED_units Christoffersen_units theor.min low.025 low.25 mean upp.75 upp.975 theor.max avuln_node NA NA MPa * 100 1e-01 1.00 10.0 NA 100 200.00 NA leaf_elastic_mod epsil_node 1000000294 MPa MPa 1e+00 5.00 NA 20.00 NA 50.00 NA wood_elastic_mod epsil_node NA MPa MPa 1e+00 5.00 NA 20.00 NA 50.00 NA wood_Kmax kmax_node 1000000290 kg H2O / m / s kg m-1 s-1 MPa-1 1e-02 0.10 0.5 NA 5 10.00 NA wood_psi50 p50_node 1000000289 m MPa 1e-01 0.50 1.0 NA 4 6.00 NA leaf_psi_osmotic pinot_node 1000000295 m MPa 1e-01 0.50 NA 2.00 NA 4.00 NA wood_psi_osmotic pinot_node 1000000298 m MPa 1e-01 0.50 NA 2.00 NA 4.00 NA leaf_psi_tlp pitlp_node 1000000284 m MPa 5e-01 NA NA NA NA NA 6.00 wood_psi_tlp pitlp_node 1000000301 m MPa 1e-01 NA NA NA NA NA NA rwc_tlp_wood rwctlp_node 1000000296 unitless unitless NA NA NA NA NA NA NA leaf_water_sat thetas_node 1000000285 kg H2O/kg biomass kg kg-1 1e-02 0.40 NA 0.65 NA 0.88 0.99 wood_water_sat thetas_node 1000000286 kg H2O/kg biomass kg kg-1 5e-02 0.35 NA NA NA 0.80 0.90 leaf_density NA NA kg/m3 NA 1e-07 NA NA NA NA NA 2000.00 leaf_psi_min NA 1000000299 m NA 1e-01 NA NA NA NA NA 700.00 leaf_water_cap NA 1000000287 kg H2O/kg biomass/m NA 1e-07 NA NA NA NA NA NA wood_Kexp NA 1000000305 unitless NA NA NA NA NA NA NA NA wood_psi_min NA 1000000300 m NA 1e-01 NA NA NA NA NA NA wood_water_cap NA 1000000288 kg H2O/kg biomass/m NA 1e-07 NA NA NA NA NA NA traits &lt;- list() Choosing PFTs 2: early tropical 3: mid tropical 4: late tropical Here we are only using one tropical PFT instead of three. But there is a hydro and non, hydro version. \\ Both were cloned from the Broadleaf Tropical PFT made for FATES, with additional species added in when trait data was added for the meta analysis. ED_Tropical: 1000000132 (http://psql-pecan.bu.edu/bety/pfts/1000000132) ED_Tropical_Hydro: 1000000131 (http://psql-pecan.bu.edu/bety/pfts/1000000131) 0.1 PFT: ED_Tropical_Hydro ED id: 1000000131 pftid &lt;- 1000000131 priorid &lt;- tbl(bety, &quot;pfts_priors&quot;) %&gt;% filter(pft_id == pftid) %&gt;% pull(prior_id) pfts_priors &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id %in% priorid) %&gt;% dplyr::select(one_of(&quot;id&quot;, &quot;variable_id&quot;, &quot;distn&quot;, &quot;parama&quot;, &quot;paramb&quot;)) %&gt;% left_join(tbl(bety, &quot;variables&quot;) %&gt;% dplyr::select(&quot;id&quot;, &quot;name&quot;), by = c(&quot;variable_id&quot; = &quot;id&quot;)) %&gt;% collect() %&gt;% rename(&quot;var_name&quot; = &quot;name&quot;) kable(pfts_priors) id variable_id distn parama paramb var_name 1000000099 2000000005 unif 0.0000 0.500 orient_factor 1000000422 1000000055 unif 0.1000 1.100 wood_density 1000000384 1000000284 lnorm 5.4200 0.530 leaf_psi_tlp 1000000446 1000000307 norm 0.4700 0.050 b2Rd 1000000429 1000000292 unif 0.0000 100.000 SRA 1000000416 1000000301 lnorm 5.4300 0.550 wood_psi_tlp 1000000425 1000000305 weibull 0.8000 4.070 wood_Kexp 1000000430 1000000290 beta 0.7200 21.950 wood_Kmax 1000000445 1000000306 gamma 138.7800 292.440 b1Rd 1000000405 1000000287 lnorm -0.2900 0.760 leaf_water_cap 1000000420 1000000289 lnorm 5.2800 0.850 wood_psi50 1000000457 1000000313 unif 0.0001 0.100 root_beta 1000000447 1000000309 lnorm -3.9300 0.030 b1Bl_large 1000000448 1000000310 norm 1.8500 0.020 b2Bl_large 2000000060 26 weibull 2.0000 7.000 stomatal_slope 1000000417 1000000288 lnorm 0.3700 0.980 wood_water_cap 1000000460 1000000314 unif 1.0000 5.000 stoma_psi_c 57 27 beta 4.0600 7.200 growth_resp_factor 35 41 weibull 1.5500 0.862 root_turnover_rate 140 273 beta 1.0000 1.000 agf_bs 142 15 weibull 2.1000 12.100 SLA 240 500 unif 0.0100 0.200 leaf_reflect_vis 241 501 unif 0.0100 0.300 leaf_reflect_nir 242 502 unif 0.0100 0.200 leaf_trans_vis 243 503 unif 0.0100 0.600 leaf_trans_nir 131 40 unif 0.0400 1.000 leaf_turnover_rate 137 21 lnorm -0.2500 1.000 fineroot2leaf 197 7 gamma 1.5000 0.400 leaf_respiration_rate_m2 216 463 unif 1.4000 2.600 veg_respiration_Q10 227 39 gamma 2.0000 22.000 quantum_efficiency 228 4 weibull 1.7000 80.000 Vcmax "],
["constants.html", "Constants [wdns]: Liquid water density [grav]: Gravity [MPa2m]: Conversion from MPa to m", " Constants C &lt;- list() [wdns]: Liquid water density ED variable name : wdns ED variable units: kg/m3 C$wdns &lt;- 1.000e3 # Liquid water density [kg/m3] [grav]: Gravity ED variable name : grav ED variable units: m/s2 C$grav &lt;- 9.80665 # Gravity acceleration [m/s2] [MPa2m]: Conversion from MPa to m ED variable name : MPa2m C$MPa2m &lt;- C$wdns / C$grav "],
["allocation-and-allometry.html", "Allocation and Allometry [SLA]: Specific Leaf Area (SLA) agf_bs Abvgnd % Struc. Biomass b1Bl_large Leaf Biomass Allom. Int. b2Bl_large Leaf Biomass Allom. Slope [wood_density]: Wood density fineroot2leaf Fine Root Allocation b1Rd Root Depth Allom. Int. b2Rd Root Depth Allom. Slope", " Allocation and Allometry [SLA]: Specific Leaf Area (SLA) And subsequently \\(LMA = (1/SLA)\\) ED variable name : SLA ED variable id: 15 There are multiple priors available for SLA so we are explicitly choosing prior 142 (this was chosen by someone else when the PFT was created.) t = &quot;SLA&quot; t_long = &quot;Specific Leaf Area &quot; traits[[t]] &lt;- list( variable_name = t, variable_id = pfts_priors %&gt;% filter(var_name == t) %&gt;% pull(variable_id), prior_id = pfts_priors %&gt;% filter(var_name == t) %&gt;% pull(id), fit = pfts_priors %&gt;% filter(var_name == t) %&gt;% select(&quot;distn&quot;, &quot;parama&quot;, &quot;paramb&quot;) ) traits[[t]]$prior = rdistn(traits[[t]]$fit) traits[[t]]$default = get_ED_default(PFT3_defaults_history, t) prior_plot(prior = traits[[t]]$prior, plot_default = traits[[t]]$default, title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;prior&quot;) agf_bs Abvgnd % Struc. Biomass b1Bl_large Leaf Biomass Allom. Int. b2Bl_large Leaf Biomass Allom. Slope [wood_density]: Wood density ED variable name : rho ED units: g cm-3 Note! Leaf density is calculated in kg cm-3 because that makes perfect sense … ED variable id: 1000000055 FATES varaiable name: WD In the database, wood_density is unitless. So I’m assuming it can be directly mapped to our wood_density as such: \\[\\frac{WD (gcm^{-2})}{\\rho_w(gcm^{-2})} * \\rho_w(gcm^{-2}) = \\frac{WD (gcm^{-2})}{1(gcm^{-2})} * 1(gcm^{-2})\\] There are multiple priors available for wood density so we are explicitly choosing prior 1000000281 (this was chosen by someone else when the PFT was created.) t = &quot;wood_density&quot; traits[[t]] &lt;- list( variable_name = t, variable_id = pfts_priors %&gt;% filter(var_name == t) %&gt;% pull(variable_id), prior_id = pfts_priors %&gt;% filter(var_name == t) %&gt;% pull(id), fit = pfts_priors %&gt;% filter(var_name == t) %&gt;% select(&quot;distn&quot;, &quot;parama&quot;, &quot;paramb&quot;) ) traits[[t]]$prior = rdistn(traits[[t]]$fit) traits[[t]]$default = get_ED_default(PFT3_defaults_history, &quot;rho&quot;) prior_plot(prior = traits[[t]]$prior, plot_default = traits[[t]]$default, title = sprintf(&quot;%s:\\n(%s, %.4f, %.4f)&quot;, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;prior&quot;) fineroot2leaf Fine Root Allocation b1Rd Root Depth Allom. Int. b2Rd Root Depth Allom. Slope "],
["photosynthesis-and-stomatal-conductance.html", "Photosynthesis and Stomatal Conductance Vcmax Vcmax traits_photo stomatal_slope Stomatal Slope traits_photo quantum_efficiency Quantum Efficiency traits_photo", " Photosynthesis and Stomatal Conductance Vcmax Vcmax traits_photo stomatal_slope Stomatal Slope traits_photo quantum_efficiency Quantum Efficiency traits_photo "],
["radiation.html", "Radiation orient_factor Leaf orientation leaf_reflect_nir Leaf NIR reflectance leaf_trans_nir Leaf NIR transmittance leaf_reflect_vis Leaf VIS reflectance leaf_trans_vis Leaf VIS transmittance", " Radiation orient_factor Leaf orientation leaf_reflect_nir Leaf NIR reflectance leaf_trans_nir Leaf NIR transmittance leaf_reflect_vis Leaf VIS reflectance leaf_trans_vis Leaf VIS transmittance "],
["respiration-and-turnover.html", "Respiration and Turnover growth_resp_factor Growth Respiration leaf_respiration_rate_m2 Leaf Respiration Rate veg_respiration_Q10 Veg. Resp. Q10 leaf_turnover_rate Leaf Turnover Rate root_turnover_rate Root Turnover Rate", " Respiration and Turnover growth_resp_factor Growth Respiration leaf_respiration_rate_m2 Leaf Respiration Rate veg_respiration_Q10 Veg. Resp. Q10 leaf_turnover_rate Leaf Turnover Rate root_turnover_rate Root Turnover Rate "],
["hydraulic-leaf-traits.html", "Hydraulic Leaf Traits [leaf_psi_osmotic]: Leaf osmotic water potential at saturation [leaf_elastic_mod]: Leaf bulk elastic modulus [leaf_density]: Density of leaf tissue [leaf_water_sat]: Leaf water content at saturation [leaf_psi_tlp]: Leaf water potential at turgor loss point [leaf_water_cap]: Leaf hydaulic capacitance. [leaf_psi_min]: Leaf minimum water potential", " Hydraulic Leaf Traits [leaf_psi_osmotic]: Leaf osmotic water potential at saturation ED ED variable name : leaf_psi_osmotic ED variable units: m BETY NOTE!! The units are NEGATIVE in the database so we can calculate a distribution that is entirely negative. Variable id: 1000000295 Prior id: 1000000388 Calculation Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: pinot_node (leaf) FATES variable units: MPa Conversion MPa to m Code t = &quot;leaf_psi_osmotic&quot; t_long = &quot;Leaf osmotic water potential at saturation &quot; i &lt;- which(priors$ED_name == t) prior_in &lt;- priors[i, stats] * C$MPa2m traits &lt;- fit_trait_dist(bety, traits, t, prior_in, accepted_dists) ## Entry with id = 1000000388 already exists. ## Parameters look the saaaaame. ## Old: weibull(2.4100, 237.4600) ## New: weibull(2.4100, 237.4600) traits[[t]]$prior = -1 * rdistn(traits[[t]]$fit) traits[[t]]$default = get_ED_default(PFT3_defaults_history, t) prior_plot(prior = traits[[t]]$prior, plot_default = traits[[t]]$default, title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;elic&quot;) [leaf_elastic_mod]: Leaf bulk elastic modulus ED ED variable name : leaf_elastic_mod ED variable units: MPa Note! This is the only case in which MPa is used instead of m! BETY Variable id: 1000000294 Prior id: 1000000387 Calculation Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: epsil_node (leaf) FATES variable units: MPa Conversion None! Code t = &quot;leaf_elastic_mod&quot; t_long = &quot;Leaf bulk elastic modulus &quot; i &lt;- which(priors$ED_name == t) prior_in &lt;- priors[i,] traits &lt;- fit_trait_dist(bety, traits, t, prior_in, accepted_dists) ## Entry with id = 1000000387 already exists. ## Parameters look the saaaaame. ## Old: gamma(3.4400, 0.1600) ## New: gamma(3.4400, 0.1600) traits[[t]]$prior = rdistn(traits[[t]]$fit) traits[[t]]$default = get_ED_default(PFT3_defaults_history, t) prior_plot(prior = traits[[t]]$prior, q = c(0,.999), plot_default = traits[[t]]$default, title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;elic&quot;) ## Warning: Removed 100 rows containing non-finite values (stat_density). [leaf_density]: Density of leaf tissue ED ED variable name : leaf_density ED variable units: kg m-3 BETY Variable id: 1000000304 Prior id: 1000000396 Calculation Expert elicitation No expert elicitation provided by Brad Christoffersen. I will use the equation in ED to calcualte the prior and add min and max values to make sure the distribution does not predict values that are not biologically possible. Copies directly from the ED code: max(0.1 * 1.e3, (leaf_elastic_mod(ipft) - 2.03) / 25.4 * 1.e3) But there is a key step here that we need to think about, which is that in the ED code, 0.1 * 1.e3 is the smallest possible value. I encorporate that information by setting 0.1 * 1.e3 as the min theoretical value when fitting the distribution (but remove the max from the equation when calculating the leaf_density_sample.) leaf_density_sample &lt;- (leaf_elastic_mod_prior - 2.03) / 25.4 * 1.e3 Values added by Betsy and Felicien: t = &quot;leaf_density&quot; t_long = &quot;Density of leaf tissue &quot; i &lt;- which(priors$ED_name == &quot;leaf_density&quot;) # Leaf_density priors[i,c(&quot;theor.min&quot;, &quot;theor.max&quot;)] &lt;- c(1e-7, 2000) # Does it make more sense to do what the ED code does??? # Turns out it doesn&#39;t change the parameters ... so maybe I&#39;ll do that priors[i,c(&quot;theor.min&quot;, &quot;theor.max&quot;)] &lt;- c(1e-3, 2000) Conversion None Code temp_leaf_density_sample &lt;- (traits[[&quot;leaf_elastic_mod&quot;]]$prior - 2.03) / 25.4 * 1.e3 # Add in the max an min from the priors table prior_in &lt;- priors[i,] # Note here I don&#39;t need to do any units conversion prior_in &lt;- prior_add_samp_data(prior_in, samp = temp_leaf_density_sample) prior_in[,stats] ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.001 121. 433. 685. 1011. 1862. 2000 traits &lt;- fit_trait_dist(bety, traits, t, prior_in, accepted_dists) ## Entry with id = 1000000396 already exists. ## Parameters look different. ## Old: weibull(1.8300, 845.2500) ## New: weibull(1.8400, 843.8900) traits[[t]]$prior = rdistn(traits[[t]]$fit) traits[[t]]$default = (get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_elastic_mod&quot;) - 2.03) / 25.4 * 1.e3 prior_plot(prior = traits[[t]]$prior, q = c(0,.995), plot_default = traits[[t]]$default, title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;mixed&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). [leaf_water_sat]: Leaf water content at saturation ED ED variable name : leaf_water_sat ED variable units: kg H2O/kg biomass BETY Variable id: 1000000285 Prior id: 1000000414 Calculation There are a couple ways to approach this: Either build a prior completely from other priors (ie using the equations from ED and a prior for LMA and leaf_density) or try to do a combination where we use the priovided expert elicitation and the prior distribution for leaf_density. I am going to try doing both just to see how they differ. Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: thetas_node (leaf) FATES variable units: kg kg-1 Conversion The equations between the two are identical except that to get from FATES to ED, must multiply by (water density)/(leaf density) Code Initial testing code From this point, we can see that just using the equations in the ED code makes the distributions predict low values which is could be a problem given that these values should not be zero and that the distribution underpredicts both in relation to the default value and the values that Felicien gave me. Thus I would create the prior using the expert elicitation values provided by Brad. Actual code t = &quot;leaf_water_sat&quot; t_long = &quot;Leaf water content at saturation &quot; i &lt;- which(priors$ED_name == t) temp_myfit_0 &lt;- prior_get_fit(priors[i,], accepted_dists, plot = FALSE) temp_myfit_0$score$dist[which.min(temp_myfit_0$score$RMSE)] ## [1] &quot;norm&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity temp_leaf_water_sat_prior_0 &lt;- rnorm(100000, temp_myfit_0$dists$norm[1], temp_myfit_0$dists$norm[2]) temp_leaf_water_sat_sample &lt;- temp_leaf_water_sat_prior_0 * (C$wdns/(traits[[&quot;leaf_density&quot;]]$prior)) # plot(density(temp_leaf_water_sat_sample), main = &quot;leaf water sat sample without fitting&quot;) # In this case I&#39;m not using the function I built because here it wouldn&#39;t make sense. prior_in &lt;- data.frame( theor.min = NA, low.025 = quantile(temp_leaf_water_sat_sample, c(.025), na.rm = TRUE), low.25 = quantile(temp_leaf_water_sat_sample, c(.25), na.rm = TRUE), mean = quantile(temp_leaf_water_sat_sample, c(.5), na.rm = TRUE), upp.75 = quantile(temp_leaf_water_sat_sample, c(.75), na.rm = TRUE), upp.975 = quantile(temp_leaf_water_sat_sample, c(.975), na.rm = TRUE), theor.max = NA) traits &lt;- fit_trait_dist(bety, traits, t, prior_in, accepted_dists) ## Entry with id = 1000000414 already exists. ## Parameters look the saaaaame. ## Old: lnorm(-0.0400, 0.6400) ## New: lnorm(-0.0400, 0.6400) traits[[t]]$prior = rdistn(traits[[t]]$fit) traits[[t]]$default = get_ED_default(PFT3_defaults_history, t) prior_plot(prior = traits[[t]]$prior, q = c(0,.995), plot_default = traits[[t]]$default, title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;mixed&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). [leaf_psi_tlp]: Leaf water potential at turgor loss point ED ED variable name : leaf_psi_tlp ED variable units: m BETY Variable id: 1000000284 Prior id: 1000000384 NOTE!! The units are NEGATIVE in the database so we can calculate a distribution that is entirely negative. Calculation Expert elicitation No expert elicitation provided by Brad Christoffersen. I will use the equation in ED to calcualte the prior and add min and max values to make sure the distribution does not predict values that are not biologically possible. Values added by Betsy and Felicien: t = &quot;leaf_psi_tlp&quot; t_long = &quot;Leaf water potential at turgor loss point &quot; i &lt;- which(priors$ED_name == t) priors[i, stats] ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.5 NA NA NA NA NA 6 # priors[which(priors$ED_name == &quot;leaf_psi_tlp&quot;), # c(&quot;theor.min&quot;, &quot;theor.max&quot;)] &lt;- c(-6, -0.5) # priors[i,c(&quot;theor.min&quot;, &quot;theor.max&quot;)] &lt;- c(0.5, 6) Code directly from ED: leaf_elastic_mod(ipft) * (leaf_psi_osmotic(ipft) / C$MPa2m) / (leaf_elastic_mod(ipft) + leaf_psi_osmotic(ipft) / C$MPa2m) * C$MPa2m Thus, leaf_psi_tlp is calculated purely from other parameters: leaf_psi_osmotic and leaf_elastic_mod temp_leaf_psi_tlp_samp &lt;- (leaf_psi_osmotic_prior * (leaf_elastic_mod_prior * C$MPa2m))/ (leaf_psi_osmotic_prior + (leaf_elastic_mod_prior * C$MPa2m)) Conversion Remember that leaf_elastic_mod is MPa, where everything else is m! Code temp_leaf_psi_tlp_samp &lt;- (traits[[&quot;leaf_psi_osmotic&quot;]]$prior * (traits[[&quot;leaf_elastic_mod&quot;]]$prior * C$MPa2m))/ (traits[[&quot;leaf_psi_osmotic&quot;]]$prior + (traits[[&quot;leaf_elastic_mod&quot;]]$prior * C$MPa2m)) # Add in the max an min from the priors table i &lt;- which(priors$ED_name == t) prior_in &lt;- priors[i,stats] * C$MPa2m # Convert from MPa to m prior_in &lt;- prior_add_samp_data(prior_in, samp = -temp_leaf_psi_tlp_samp) prior_in[,stats] ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 50.98581065 51.54306697 153.2210207 231.2432454 326.2985 608.4072799 ## theor.max ## 1 611.8297278 myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == !!priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) traits &lt;- fit_trait_dist(bety, traits, t, prior_in, accepted_dists) ## Entry with id = 1000000384 already exists. ## Parameters look different. ## Old: lnorm(5.4200, 0.5300) ## New: lnorm(5.4200, 0.5400) traits[[t]]$prior = -1 * rdistn(traits[[t]]$fit) # Remember to flip back over for psi traits[[t]]$default = get_ED_default(PFT3_defaults_history, t) prior_plot(prior = traits[[t]]$prior, q = c(.005,1), plot_default = traits[[t]]$default, title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;mixed&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). prior_plot(prior = traits[[t]]$prior * (-1/C$MPa2m), q = c(0,.995), plot_default = traits[[t]]$default * (-1/C$MPa2m), title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;mixed&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). [leaf_water_cap]: Leaf hydaulic capacitance. ED ED variable name : leaf_water_cap ED variable units: kg H2O/kg biomass/m BETY Variable id: 1000000287 Prior id: 1000000405 NOTE: units in BETY are g H2O / kg biomass / m! This is because we needed to multiply by 1000 to get large enough values to fit the distribution. Calculation Expert elicitation No expert elicitation provided by Brad Christoffersen. I will use the equation in ED to calcualte the prior and add min and max values to make sure the distribution does not predict values that are not biologically possible. Values added by Betsy and Felicien: t = &quot;leaf_water_cap&quot; t_long = &quot;Leaf hydaulic capacitance &quot; priors[which(priors$ED_name == &quot;leaf_water_cap&quot;), c(&quot;theor.min&quot;, &quot;theor.max&quot;)] &lt;- c(1e-7, NA) Equation copied directly from ED: (1. - leaf_psi_osmotic(ipft) / (4. * leaf_psi_tlp(ipft))) * leaf_water_sat(ipft) / (4. * abs(leaf_psi_tlp(ipft))) Conversion Don’t forget about the switch from kg to g! Code # leaf_water_cap_samp &lt;- # 1000 * (1 - leaf_psi_osmotic_prior / (4 * leaf_psi_tlp_prior)) * # (leaf_water_sat_prior / (4 * abs(leaf_psi_tlp_prior))) # * (C$wdns/leaf_density_prior) # # leaf_water_cap_samp &lt;- leaf_water_cap_samp[0 &lt; leaf_water_cap_samp] temp_leaf_water_cap_samp &lt;- 1000 * (1 - traits[[&quot;leaf_psi_osmotic&quot;]]$prior / (4 * traits[[&quot;leaf_psi_tlp&quot;]]$prior)) * (traits[[&quot;leaf_water_sat&quot;]]$prior / (4 * abs(traits[[&quot;leaf_psi_tlp&quot;]]$prior))) # * (C$wdns/traits[[&quot;leaf_density&quot;]]$prior) temp_leaf_water_cap_samp &lt;- temp_leaf_water_cap_samp[0 &lt; temp_leaf_water_cap_samp] # Add in the max an min from the priors table i &lt;- which(priors$ED_name == &quot;leaf_water_cap&quot;) prior_in &lt;- priors[i,stats] prior_in[,&quot;theor.min&quot;] &lt;- NA # prior_in[,&quot;theor.max&quot;] &lt;- max(.35 * (1/C$MPa2m) * (C$wdns/leaf_density_prior) ) prior_in &lt;- prior_add_samp_data(prior_in, samp = temp_leaf_water_cap_samp) prior_in[,stats] ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;lgl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 NA 0.164 0.451 0.747 1.24 3.29 NA traits &lt;- fit_trait_dist(bety, traits, t, prior_in, accepted_dists) ## Entry with id = 1000000405 already exists. ## Parameters look different. ## Old: lnorm(-0.2900, 0.7600) ## New: lnorm(-0.2900, 0.7500) traits[[t]]$prior = rdistn(traits[[t]]$fit) * (1/1000) # Convert back to kg traits[[t]]$default = get_ED_default(PFT3_defaults_history, t) prior_plot(prior = traits[[t]]$prior, q = c(0, .975), plot_default = traits[[t]]$default, title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;mixed&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). [leaf_psi_min]: Leaf minimum water potential This is calculated from [leaf_rwc_min]: Leaf minimum relative water content or leaf residual fraction, which I have not added to BETY. ED ED variable name : leaf_psi_min ED variable units: m BETY Variable id: 1000000299 Prior id: 1000000392 NOTE!! The units are NEGATIVE in the database so we can calculate a distribution that is entirely negative. Calculation Expert elicitation No expert elicitation provided by Brad Christoffersen. I will use the equation in ED to calcualte the prior and add min and max values to make sure the distribution does not predict values that are not biologically possible. t = &quot;leaf_psi_min&quot; t_long = &quot;Leaf minimum water potential &quot; i &lt;- which(priors$ED_name == &quot;leaf_psi_min&quot;) # Values added by Betsy and Felicien: c(-700, -0.1) priors[i,c(&quot;theor.min&quot;, &quot;theor.max&quot;)] &lt;- c(0.1,700) # Did Felicien mean 70 ????? # priors[which(priors$ED_name == &quot;leaf_psi_min&quot;), # c(&quot;theor.min&quot;, &quot;theor.max&quot;)] &lt;- c(0.1,70) ## # No max value # priors[which(priors$ED_name == &quot;leaf_psi_min&quot;), # c(&quot;theor.min&quot;, &quot;theor.max&quot;)] &lt;- c(0.1,NA) Code copied from ED: leaf_rwc_min = 0.01 * leaf_elastic_mod(ipft) + 0.17 leaf_psi_min = (leaf_rwc_min(ipft) - 1.) * leaf_water_sat(ipft) / leaf_water_cap(ipft) Conversion None Code # traits[[&quot;leaf_water_sat&quot;]]$prior temp_leaf_rwc_min_samp = 0.01 * traits[[&quot;leaf_elastic_mod&quot;]]$prior + 0.17 temp_leaf_psi_min_samp = (temp_leaf_rwc_min_samp - 1.) * traits[[&quot;leaf_water_sat&quot;]]$prior / traits[[&quot;leaf_water_cap&quot;]]$prior # Add in the max an min from the priors table prior_in &lt;- priors[i,stats] * C$MPa2m # Convert from MPa to m prior_in &lt;- prior_add_samp_data(prior_in, samp = -temp_leaf_psi_min_samp) prior_in[,stats] / C$MPa2m ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## 1 0.1 1.008678842 3.798156813 7.595399409 15.1059874 55.4021743 700 traits &lt;- fit_trait_dist(bety, traits, t, prior_in, accepted_dists) ## Entry with id = 1000000392 already exists. ## Parameters look the saaaaame. ## Old: lnorm(6.6500, 1.0200) ## New: lnorm(6.6500, 1.0200) traits[[t]]$prior = -1 * rdistn(traits[[t]]$fit) # Remember to flip back over for psi traits[[t]]$default = get_ED_default(PFT3_defaults_history, t) prior_plot(prior = traits[[t]]$prior, q = c(.025,1), plot_default = traits[[t]]$default, title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;mixed&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). "],
["hydraulic-wood-traits.html", "Hydraulic Wood Traits [wood_psi_osmotic]: Sapwood osmotic water potential at saturation [wood_elastic_mod]: Sapwood bulk elastic modulus [wood_water_sat]: Sapwood water content at saturation [wood_psi_tlp]: Sapwood water potential at turgor loss point [wood_water_cap]: Wood hydaulic capacitance [wood_psi_min]: Sapwood minimum relative water content or Sapwood residual fraction [wood_Kmax]: Maximum hydraulic conductivity of the stem [wood_psi50]: Water potential at which 50% of stem conductivity is lost [ax]: Slope of xylem vulnerability curve at P50 [wood_Kexp]: Exponent for the hydraulic vulnerability curve of stem conductivity", " Hydraulic Wood Traits [wood_psi_osmotic]: Sapwood osmotic water potential at saturation ED ED variable name : wood_psi_osmotic ED variable units: m BETY Variable id: 1000000298 Prior id: 1000000410 NOTE!! The units are NEGATIVE in the database so we can calculate a distribution that is entirely negative. Calculation Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: pinot_node (stem) FATES variable units: m Conversion MPa to m Code t = &quot;wood_psi_osmotic&quot; t_long = &quot;Sapwood osmotic water potential at saturation &quot; i &lt;- which(priors$ED_name == t) prior_in &lt;- priors[i, stats] * C$MPa2m traits &lt;- fit_trait_dist(bety, traits, t, prior_in, accepted_dists) ## Entry with id = 1000000410 already exists. ## Parameters look the saaaaame. ## Old: weibull(2.4100, 237.4600) ## New: weibull(2.4100, 237.4600) traits[[t]]$prior = -1 * rdistn(traits[[t]]$fit) traits[[t]]$default = get_ED_default(PFT3_defaults_history, t) prior_plot(prior = traits[[t]]$prior, plot_default = traits[[t]]$default, title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;elic&quot;) [wood_elastic_mod]: Sapwood bulk elastic modulus ED ED variable name : wood_elastic_mod ED variable units: MPa Note! This is the only case in which MPa is used instead of m! BETY Variable id: 1000000303 Prior id: 1000000394 Calculation Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: epsil_node (stem) FATES variable units: MPa Conversion None! Code t = &quot;wood_elastic_mod&quot; t_long = &quot;wood bulk elastic modulus &quot; i &lt;- which(priors$ED_name == t) prior_in &lt;- priors[i,] traits &lt;- fit_trait_dist(bety, traits, t, prior_in, accepted_dists) ## Entry with id = 1000000394 already exists. ## Parameters look the saaaaame. ## Old: gamma(3.4400, 0.1600) ## New: gamma(3.4400, 0.1600) traits[[t]]$prior = rdistn(traits[[t]]$fit) traits[[t]]$default = get_ED_default(PFT3_defaults_history, t) prior_plot(prior = traits[[t]]$prior, q = c(0,.999), plot_default = traits[[t]]$default, title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;elic&quot;) ## Warning: Removed 100 rows containing non-finite values (stat_density). [wood_water_sat]: Sapwood water content at saturation ED ED variable name: wood_water_sat ED variable units: kg H2O/kg biomass BETY Variable id: `` Prior id: `` Calculation Expert elicitation Expert elicitation provided by Brad Christoffersen FATES variable name: thetas_node (stem) FATES variable units: kg kg-1 Conversion multiply by the density of water over wood density Code t = &quot;wood_water_sat&quot; t_long = &quot;Wood water content at saturation &quot; i &lt;- which(priors$ED_name == t) temp_wws_fit &lt;- prior_get_fit(priors[i,], accepted_dists, plot = FALSE) temp_wws_fit$score$dist[which.min(temp_wws_fit$score$RMSE)] ## [1] &quot;norm&quot; # I&#39;m skipping steps here for the sake of time and sanity # Normal is the best fit temp_wws_prior &lt;- rnorm(100000, temp_wws_fit$dists$norm[1], temp_wws_fit$dists$norm[2]) temp_wws_sample &lt;- temp_wws_prior * (C$wdns/(traits[[&quot;wood_density&quot;]]$prior * 1e3)) # Note that here we have to multiply by 1e3 because of the units of wood density # In this case I&#39;m not using the function I built because here it wouldn&#39;t make sense. prior_in &lt;- data.frame( theor.min = NA, low.025 = quantile(temp_wws_sample, c(.025), na.rm = TRUE), low.25 = quantile(temp_wws_sample, c(.25), na.rm = TRUE), mean = quantile(temp_wws_sample, c(.5), na.rm = TRUE), upp.75 = quantile(temp_wws_sample, c(.75), na.rm = TRUE), upp.975 = quantile(temp_wws_sample, c(.975), na.rm = TRUE), theor.max = NA) traits &lt;- fit_trait_dist(bety, traits, t, prior_in, accepted_dists) ## Entry with id = 1000000424 already exists. ## Parameters look the saaaaame. ## Old: lnorm(0.0100, 0.6100) ## New: lnorm(0.0100, 0.6100) # Now we can remove temp variables rm(temp_wws_fit, temp_wws_prior, temp_wws_sample) traits[[t]]$prior = rdistn(traits[[t]]$fit) traits[[t]]$default = get_ED_default(PFT3_defaults_history, t) prior_plot(prior = traits[[t]]$prior, q = c(0,.99), plot_default = traits[[t]]$default, title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;mixed&quot;) ## Warning: Removed 1000 rows containing non-finite values (stat_density). [wood_psi_tlp]: Sapwood water potential at turgor loss point ED ED variable name: wood_psi_tlp ED variable units: m BETY Variable id: `` Prior id: `` NOTE!! The units are NEGATIVE in the database so we can calculate a distribution that is entirely negative. Calculation Expert elicitation No expert elicitation provided by Brad Christoffersen. There is a FATES parameter but it is calculated from other parameters FATES variable name: pitlp_node FATES variable units: MPa Constraints we added - wood_psi_tlp &gt; .1 MPa (this was given as a boundary for other psi variables) Conversion Calculated from other parameters: wood_psi_osmotic and wood_elastic_mod Remember that wood_elastic_mod is MPa, where everything else is m! Code wood_psi_tlp_samp = (wood_psi_osmotic_prior * wood_elastic_mod_prior * C$MPa2m)/ (wood_psi_osmotic_prior + wood_elastic_mod_prior * C$MPa2m) t = &quot;wood_psi_tlp&quot; t_long = &quot;Sapwood water potential at turgor loss point &quot; temp_wpt_sample &lt;- (traits[[&quot;wood_psi_osmotic&quot;]]$prior * traits[[&quot;wood_elastic_mod&quot;]]$prior * C$MPa2m)/ (traits[[&quot;wood_psi_osmotic&quot;]]$prior + traits[[&quot;wood_elastic_mod&quot;]]$prior * C$MPa2m) summary(temp_wpt_sample) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -169657.7617 -326.4036 -231.7416 -261.7656 -154.2457 48647.5248 i &lt;- which(priors$ED_name == t) prior_in &lt;- priors[i,stats] * C$MPa2m # Convert from MPa to m prior_in &lt;- prior_add_samp_data(prior_in, samp = -temp_wpt_sample) prior_in[,stats] ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 10.19716213 49.65526652 154.2456642 231.7415966 326.4035836 611.3858528 ## theor.max ## 1 NA traits &lt;- fit_trait_dist(bety, traits, t, prior_in, accepted_dists) ## Entry with id = 1000000416 already exists. ## Parameters look the saaaaame. ## Old: lnorm(5.4300, 0.5500) ## New: lnorm(5.4300, 0.5500) traits[[t]]$prior &lt;- -1 * rdistn(traits[[t]]$fit) # Remember to flip back over for psi traits[[t]]$default &lt;- get_ED_default(PFT3_defaults_history, t) p_plot &lt;- prior_plot(prior = traits[[t]]$prior, # q = c(.005,1), plot_default = traits[[t]]$default, title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;mixed&quot;) traits[[t]]$obs &lt;- -1 * trait_data %&gt;% filter(var == t) %&gt;% pull(mean) obs_plot &lt;- data.frame(mean = traits[[t]]$obs, y = 0) p_plot + geom_density(data = obs_plot, aes(x = mean, fill = &quot;obs&quot;, color = &quot;obs&quot;), alpha = .3) + geom_point(data = obs_plot, aes(x = mean, y = y, color = &quot;obs&quot;), shape = &quot;o&quot;, size = 3) [wood_water_cap]: Wood hydaulic capacitance ED ED variable name : wood_water_cap ED variable units: kg H2O/kg biomass/m BETY Different units in BETY so we can fit a distribution! The numbers were so small that I couldn’t get the fitting function to work until I scaled the variable up! BETY varaible units: g H2O / kg biomass / m Calculation Expert elicitation No expert elicitation provided by Brad Christoffersen. Constraints we added - wood_water_cap &gt; 1e-07 kg H2O/kg biomass/m Code # wood_water_cap_samp &lt;- # 1000 * (1/wood_density_prior) * (1 - wood_psi_osmotic_prior / (4 * wood_psi_tlp_prior)) * # (wood_water_sat_prior / (4 * abs(wood_psi_tlp_prior))) temp_wwc_samp &lt;- 1000 * (1/traits[[&quot;wood_density&quot;]]$prior) * (1 - traits[[&quot;wood_psi_osmotic&quot;]]$prior / (4 * traits[[&quot;wood_psi_tlp&quot;]]$prior)) * (traits[[&quot;wood_water_sat&quot;]]$prior / (4 * abs(traits[[&quot;wood_psi_tlp&quot;]]$prior))) summary(temp_wwc_samp) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -140.6434961 0.7543873 1.4317272 2.3744512 2.8016234 94.9370757 t = &quot;wood_water_cap&quot; t_long = &quot;Wood Water Cap &quot; i &lt;- which(priors$ED_name == t) prior_in &lt;- priors[i,stats] prior_in &lt;- prior_add_samp_data(prior_in, samp = temp_wwc_samp) prior_in[,stats] ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.0000001 0.199 0.754 1.43 2.80 10.9 NA traits &lt;- fit_trait_dist(bety, traits, t, prior_in, accepted_dists) ## Entry with id = 1000000417 already exists. ## Parameters look the saaaaame. ## Old: lnorm(0.3700, 0.9800) ## New: lnorm(0.3700, 0.9800) # I don&#39;t actually remember why we were plotting 10, 100, 300, 900 ... ? traits[[t]]$prior = rdistn(traits[[t]]$fit) * (1/1000) # Convert back to kg traits[[t]]$default = get_ED_default(PFT3_defaults_history, t) p_plot &lt;- prior_plot(prior = traits[[t]]$prior, q = c(0, .995), plot_default = traits[[t]]$default, title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;mixed&quot;) + geom_vline(aes(xintercept = 10/C$MPa2m * (1/1000)), color = &quot;gray&quot;) + geom_vline(aes(xintercept = 100/C$MPa2m * (1/1000)), color = &quot;gray&quot;) + geom_vline(aes(xintercept = 300/C$MPa2m * (1/1000)), color = &quot;gray&quot;) + geom_vline(aes(xintercept = 900/C$MPa2m * (1/1000)), color = &quot;gray&quot;) traits[[t]]$obs &lt;- trait_data %&gt;% filter(var == t) %&gt;% pull(mean) * (1/1000) # Convert back to kg obs_plot &lt;- data.frame(mean = traits[[t]]$obs, y = 0) p_plot + geom_density(data = obs_plot, aes(x = mean, fill = &quot;obs&quot;, color = &quot;obs&quot;), alpha = .3) + geom_point(data = obs_plot, aes(x = mean, y = y, color = &quot;obs&quot;), shape = &quot;o&quot;, size = 3) ## Warning: Removed 500 rows containing non-finite values (stat_density). ## Warning: Removed 1 rows containing non-finite values (stat_density). ## Warning: Removed 1 rows containing missing values (geom_point). [wood_psi_min]: Sapwood minimum relative water content or Sapwood residual fraction ED ED variable name : wood_psi_min Ed variable units: m BETY Negative units in BETY so we can fit a distribution! BETY varaible units: -m Calculation Expert elicitation There are no FATES parameters Constraints we added - wood_psi_min &gt; .1 MPa (this was given as a boundary for other psi variables) Code Calculated from other priors. Should I put wood_rwc_min and rwc_tlp_wood in the database too? # rwc_tlp_wood_samp &lt;- 1. - (1. - 0.75 * wood_density_prior) / (2.74 + 2.01 * wood_density_prior) # wood_rwc_min_samp = wood_elastic_mod_prior * (1. - rwc_tlp_wood_samp) / (wood_psi_osmotic_prior / C$MPa2m) + 1. # wood_psi_min_samp = (wood_rwc_min_samp - 1.) * wood_water_sat_prior / wood_water_cap_prior temp_rwc_tlp_wood_samp &lt;- 1. - (1. - 0.75 * traits[[&quot;wood_density&quot;]]$prior) / (2.74 + 2.01 * traits[[&quot;wood_density&quot;]]$prior) temp_wood_rwc_min_samp = traits[[&quot;wood_elastic_mod&quot;]]$prior * (1. - temp_rwc_tlp_wood_samp) / (traits[[&quot;wood_psi_osmotic&quot;]]$prior / C$MPa2m) + 1. temp_wood_rwc_min_samp = (temp_wood_rwc_min_samp - 1.) * traits[[&quot;wood_water_sat&quot;]]$prior / traits[[&quot;wood_water_cap&quot;]]$prior t = &quot;wood_psi_min&quot; t_long = &quot;Wood Psi Min &quot; i &lt;- which(priors$ED_name == t) prior_in &lt;- priors[i,stats] * C$MPa2m # Convert from MPa to m prior_in &lt;- prior_add_samp_data(prior_in, samp = -temp_wood_rwc_min_samp) prior_in[,stats] ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 10.19716213 46.03560362 325.4214013 906.7828218 2529.777505 17709.45412 ## theor.max ## 1 NA traits &lt;- fit_trait_dist(bety, traits, t, prior_in, accepted_dists) ## Entry with id = 1000000419 already exists. ## Parameters look different. ## Old: lnorm(6.8000, 1.5200) ## New: lnorm(6.8100, 1.5200) traits[[t]]$prior = -1 * rdistn(traits[[t]]$fit) # Remember to flip back over for psi traits[[t]]$default = get_ED_default(PFT3_defaults_history, t) prior_plot(prior = traits[[t]]$prior, q = c(.025,1), plot_default = traits[[t]]$default, title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;mixed&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). [wood_Kmax]: Maximum hydraulic conductivity of the stem ED ED variable name : wood_Kmax ED variable units: kg H2O / m / s Note! This is the only case in which MPa is used instead of m! BETY Calculation Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: kmax_node FATES variable units: kg m-1 s-1 MPa-1 Conversion I don’t think we need to multiply by the density of water … which is confusing. Code t = &quot;wood_Kmax&quot; t_long = &quot;Maximum hydraulic conductivity of the stem &quot; i &lt;- which(priors$ED_name == t) prior_in &lt;- priors[i, stats] / C$MPa2m fit_trait_dist(bety, traits, t, prior_in, accepted_dists, return_traits = FALSE) ## Entry with id = 1000000418 already exists. ## Parameters look the saaaaame. ## Old: exp(32.6600) ## New: exp(32.6600) # In this case, the exponential function is the best fit, # but I&#39;m going to choose the beta function because it is much easier to deal # with in the meta analysis. This could be wrong and we may need to return to it. traits &lt;- fit_trait_dist(bety, traits, t, prior_in, accepted_dists = &quot;beta&quot;) ## Entry with id = 1000000430 already exists. ## Parameters look the saaaaame. ## Old: beta(0.7200, 21.9500) ## New: beta(0.7200, 21.9500) traits[[t]]$prior = rdistn(traits[[t]]$fit) traits[[t]]$default = get_ED_default(PFT3_defaults_history, t) p_plot &lt;- prior_plot(prior = traits[[t]]$prior, q = c(0,.975), plot_default = traits[[t]]$default, title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;elic&quot;) traits[[t]]$obs &lt;- trait_data %&gt;% filter(var == t) %&gt;% pull(mean) obs_plot &lt;- data.frame(mean = traits[[t]]$obs, y = 0) p_plot + geom_density(data = obs_plot, aes(x = mean, fill = &quot;obs&quot;, color = &quot;obs&quot;), alpha = .3) + geom_point(data = obs_plot, aes(x = mean, y = y, color = &quot;obs&quot;), shape = &quot;o&quot;, size = 3) ## Warning: Removed 2500 rows containing non-finite values (stat_density). ## Warning: Removed 3 rows containing non-finite values (stat_density). ## Warning: Removed 3 rows containing missing values (geom_point). [wood_psi50]: Water potential at which 50% of stem conductivity is lost ED ED variable name : wood_psi50 ED variable units: m BETY Negative units in BETY so we can fit a distribution! BETY varaible units: -m Calculation NOTE: There is an ERROR in the ED code for the equation for wood_psi50 Should be: (-1.09-(3.57 * rho(ipft) ^ 1.73) * C$MPa2m This one is tricky, do we keep the normal distribution because it’s the best fit? Expert elicitation FATES varaiable name: p50_node (stem) FATES variable units: MPa Conversion MPa to m Code Using the best fit norm t = &quot;wood_psi50&quot; t_long = &quot;Water potential at which 50% of stem conductivity is lost &quot; i &lt;- which(priors$ED_name == t) prior_in &lt;- priors[i, stats] * C$MPa2m fit_trait_dist(bety, traits, t, prior_in, accepted_dists, return_traits = FALSE) ## Entry with id = 1000000360 already exists. ## Parameters look the saaaaame. ## Old: norm(284.6500, 176.3200) ## New: norm(284.6500, 176.3200) # In this case norm is the best fitting ditribution, # But a positive number ends up falling within the 95% CI of the distribution. # So I&#39;m going to choose a log normal distribution even though it is not the best fit. # Hopefully this can also be fixed given that we have data for both psi50 and Kexp... traits &lt;- fit_trait_dist(bety, traits, t, prior_in, accepted_dists = &quot;lnorm&quot;) ## Entry with id = 1000000420 already exists. ## Parameters look the saaaaame. ## Old: lnorm(5.2800, 0.8500) ## New: lnorm(5.2800, 0.8500) traits[[t]]$prior = -1 * rdistn(traits[[t]]$fit) # Calculating default from wood density by hand because it is calculated incorrectly in ED! traits[[t]]$default = (-1.09 - (3.57 * traits[[&quot;wood_density&quot;]]$default ^ 1.73)) * C$MPa2m p_plot &lt;- prior_plot(prior = traits[[t]]$prior, q = c(0.025,1), plot_default = traits[[t]]$default, title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;elic&quot;) traits[[t]]$obs &lt;- trait_data %&gt;% filter(var == t) %&gt;% pull(mean) * -1 obs_plot &lt;- data.frame(mean = traits[[t]]$obs, y = 0) p_plot + geom_density(data = obs_plot, aes(x = mean, fill = &quot;obs&quot;, color = &quot;obs&quot;), alpha = .3) + geom_point(data = obs_plot, aes(x = mean, y = y, color = &quot;obs&quot;), shape = &quot;o&quot;, size = 3) ## Warning: Removed 2500 rows containing non-finite values (stat_density). [ax]: Slope of xylem vulnerability curve at P50 ED Not in ED, but will be used to calculate Kexp. BETY Calculation Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: avuln_node (stem) FATES variable units: unitless Conversion None! Code t = &quot;ax&quot; t_long = &quot;Slope of xylem vulnerability curve at P50 &quot; i &lt;- which(priors$Christoffersen_name == &quot;avuln_node&quot;) prior_in &lt;- priors[i, stats] traits &lt;- fit_trait_dist(bety, traits, t, prior_in, accepted_dists) ## Entry with id = 1000000421 already exists. ## Parameters look the saaaaame. ## Old: exp(0.0200) ## New: exp(0.0200) traits[[t]]$prior = rdistn(traits[[t]]$fit) prior_plot(prior = traits[[t]]$prior, q = c(0,.975), title = sprintf(&quot;%s(%s):\\n(%s, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama), type = &quot;elic&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). [wood_Kexp]: Exponent for the hydraulic vulnerability curve of stem conductivity … under the Weibull function 1/(1+(psi/psi50) ^ Kexp_stem) ED ED variable name : wood_Kexp ED variable units: unitless BETY Calculation Kexp = -ax * 4 * p50 / 100 Expert elicitation None Conversion None! Code t = &quot;wood_Kexp&quot; t_long = &quot;Exponent for the hydraulic vulnerability curve of stem conductivity &quot; temp_wood_Kexp_samp &lt;- -1 * traits[[&quot;ax&quot;]]$prior * 4 * (traits[[&quot;wood_psi50&quot;]]$prior/C$MPa2m) / 100 summary(temp_wood_Kexp_samp) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000250 0.8779491 2.4681003 5.4610349 6.1900467 667.6019459 i &lt;- which(priors$ED_name == t) prior_in &lt;- priors[i,stats] prior_in &lt;- prior_add_samp_data(prior_in, samp = temp_wood_Kexp_samp) prior_in[,stats] ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 NA 0.0691 0.878 2.47 6.19 29.1 NA traits &lt;- fit_trait_dist(bety, traits, t, prior_in, accepted_dists) ## Entry with id = 1000000425 already exists. ## Parameters look different. ## Old: weibull(0.8000, 4.0700) ## New: weibull(0.8000, 4.0600) traits[[t]]$prior = rdistn(traits[[t]]$fit) # Calculating default from wood density by hand because it is calculated incorrectly in ED! traits[[t]]$default = 0.544 * 4. * (-traits[[&quot;wood_psi50&quot;]]$default / C$MPa2m) ^ (-0.17) p_plot &lt;- prior_plot(prior = traits[[t]]$prior, q = c(0,.975), plot_default = traits[[t]]$default, title = sprintf(&quot;%s(%s):\\n%s(%.4f, %.4f)&quot;, t_long, t, traits[[t]]$fit$distn, traits[[t]]$fit$parama, traits[[t]]$fit$paramb), type = &quot;equation&quot;) traits[[t]]$obs &lt;- trait_data %&gt;% filter(var == t) %&gt;% pull(mean) obs_plot &lt;- data.frame(mean = traits[[t]]$obs, y = 0) p_plot + geom_density(data = obs_plot, aes(x = mean, fill = &quot;obs&quot;, color = &quot;obs&quot;), alpha = .3) + geom_point(data = obs_plot, aes(x = mean, y = y, color = &quot;obs&quot;), shape = &quot;o&quot;, size = 3) ## Warning: Removed 2500 rows containing non-finite values (stat_density). Note: here the miscalculation of psi50 in the code barely shows up because the value is divided by a large number. "],
["hydraulic-root-traits.html", "Hydraulic Root Traits root beta root curvature", " Hydraulic Root Traits root beta root curvature … but we aren’t using it because there is no prior "]
]
