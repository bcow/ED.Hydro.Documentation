[
["index.html", "Calculating ED Hydro Parameter Priors Documentation", " Calculating ED Hydro Parameter Priors Betsy Cowdery 2019-04-08 Documentation So far this covers how I calculated all the priors. It may ultimately show how the priors compare to the observed data (and the results of a meta analysis given the PFTs we’re interested in.) "],
["setup.html", "Setup", " Setup ED_name Christoffersen_name BETY_variable_id BETY_prior_id ED_units Christoffersen_units theor.min low.025 low.25 mean upp.75 upp.975 theor.max wood_Kexp avuln_node 1000000291 1000000361 unitless unitless 1e-01 1.00 10.0 NA 100 200.00 NA leaf_elastic_mod epsil_node 1000000294 1000000387 MPa MPa 1e+00 5.00 NA 20.00 NA 50.00 NA wood_elastic_mod epsil_node NA NA MPa MPa 1e+00 5.00 NA 20.00 NA 50.00 NA wood_Kmax kmax_node 1000000290 1000000357 kg H2O / m / s kg m-1 s-1 MPa-1 1e-02 0.10 0.5 NA 5 10.00 NA wood_psi50 p50_node 1000000289 1000000360 m MPa 1e-01 0.50 1.0 NA 4 6.00 NA leaf_psi_osmotic pinot_node 1000000295 1000000388 m MPa 1e-01 0.50 NA 2.00 NA 4.00 NA wood_psi_osmotic pinot_node 1000000298 NA m MPa 1e-01 0.50 NA 2.00 NA 4.00 NA leaf_psi_tlp pitlp_node 1000000284 1000000384 m MPa 5e-01 NA NA NA NA NA 6.00 wood_psi_tlp pitlp_node 1000000301 NA m MPa 1e-01 NA NA NA NA NA NA rwc_tlp_wood rwctlp_node 1000000296 NA unitless unitless NA NA NA NA NA NA NA leaf_water_sat thetas_node 1000000285 1000000358 kg H2O/kg biomass kg kg-1 1e-02 0.40 NA 0.65 NA 0.88 0.99 wood_water_sat thetas_node 1000000286 1000000359 kg H2O/kg biomass kg kg-1 5e-02 0.35 NA NA NA 0.80 0.90 leaf_density NA NA NA kg/m3 NA 1e-07 NA NA NA NA NA 2000.00 leaf_psi_min NA 1000000299 1000000392 m NA 1e-01 NA NA NA NA NA 700.00 leaf_water_cap NA 1000000287 1000000390 kg H2O/kg biomass/m NA 1e-07 NA NA NA NA NA NA wood_psi_min NA 1000000300 NA m NA 1e-01 NA NA NA NA NA NA wood_water_cap NA 1000000288 1000000391 kg H2O/kg biomass/m NA 1e-07 NA NA NA NA NA NA "],
["wdns-liquid-water-density.html", "[wdns]: Liquid water density", " [wdns]: Liquid water density ED variable name : wdns ED variable units: kg/m3 wdns &lt;- 1.000e3 # Liquid water density [kg/m3] "],
["grav-gravity.html", "[grav]: Gravity", " [grav]: Gravity ED variable name : grav ED variable units: m/s2 grav &lt;- 9.80665 # Gravity acceleration [m/s2] "],
["mpa2m-conversion-from-mpa-to-m.html", "[MPa2m]: Conversion from MPa to m", " [MPa2m]: Conversion from MPa to m ED variable name : MPa2m MPa2m &lt;- wdns / grav "],
["wood-density-wood-density.html", "[wood_density]: Wood density", " [wood_density]: Wood density ED variable name : rho ED units: g cm-3 Note! Leaf density is calculated in kg cm-3 because that makes perfect sense … ED variable id: 1000000055 FATES varaiable name: WD In the database, wood_density is unitless. So I’m assuming it can be directly mapped to our wood_density as such: \\[\\frac{WD (gcm^{-2})}{\\rho_w(gcm^{-2})} * \\rho_w(gcm^{-2}) = \\frac{WD (gcm^{-2})}{1(gcm^{-2})} * 1(gcm^{-2})\\] There are multiple priors available for wood density so we are explicitly choosing prior 1000000281 (this was chosen by someone else when the PFT was created.) wood_density_id &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;wood_density&quot;) %&gt;% pull(id) wood_density_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(variable_id == wood_density_id) %&gt;% filter(id == 1000000281) %&gt;% collect() wood_density_prior &lt;- rdistn(wood_density_fit) wood_density_default &lt;- get_ED_default(PFT3_defaults_history, &quot;rho&quot;) prior_plot(prior = wood_density_prior, plot_default = wood_density_default, title = sprintf(&quot;(wood_density): %s&quot;, wood_density_fit$distn), type = &quot;prior&quot;) "],
["sla-specific-leaf-area-sla.html", "[SLA]: Specific Leaf Area (SLA)", " [SLA]: Specific Leaf Area (SLA) And subsequently \\(LMA = (1/SLA)\\) ED variable name : SLA ED variable id: 15 There are multiple priors available for SLA so we are explicitly choosing prior 142 (this was chosen by someone else when the PFT was created.) SLA_id &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;SLA&quot;) %&gt;% pull(id) SLA_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(variable_id == SLA_id) %&gt;% filter(id == 142) %&gt;% collect() SLA_prior &lt;- rdistn(SLA_fit) SLA_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;SLA&quot;) prior_plot(prior = SLA_prior, plot_default = SLA_default, title = sprintf(&quot;(SLA): %s&quot;, SLA_fit$distn), type = &quot;prior&quot;) "],
["leaf-psi-osmotic-leaf-osmotic-water-potential-at-saturation.html", "1 [leaf_psi_osmotic]: Leaf osmotic water potential at saturation 1.1 ED 1.2 BETY 1.3 Calculation 1.4 Code", " 1 [leaf_psi_osmotic]: Leaf osmotic water potential at saturation 1.1 ED ED variable name : leaf_psi_osmotic ED variable units: m 1.2 BETY NOTE!! The units are NEGATIVE in the database so we can calculate a distribution that is entirely negative. Variable id: 1000000295 Prior id: 1000000388 1.3 Calculation 1.3.1 Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: pinot_node (leaf) FATES variable units: MPa 1.3.2 Conversion MPa to m 1.4 Code i &lt;- which(priors$ED_name == &quot;leaf_psi_osmotic&quot;) prior_in &lt;- priors[i, stats] * MPa2m myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) myfit$score$dist[which.min(myfit$score$RMSE)] ## [1] &quot;weibull&quot; variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_psi_osmotic_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000388 already exists. Parameters look the same. Old: weibull(2.4100, 237.4600) New: weibull(2.4100, 237.4600)&quot; leaf_psi_osmotic_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_psi_osmotic_prior_id) %&gt;% collect() leaf_psi_osmotic_prior &lt;- -rdistn(leaf_psi_osmotic_fit) # NOTE: Need to convert to m from -m leaf_psi_osmotic_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_psi_osmotic&quot;) prior_plot(prior = leaf_psi_osmotic_prior, q = c(0,1), plot_default = leaf_psi_osmotic_default, title = sprintf(&quot; (leaf_psi_osmotic): %s&quot;, leaf_psi_osmotic_fit$distn), type = &quot;data&quot;) "],
["leaf-elastic-mod-leaf-bulk-elastic-modulus.html", "2 [leaf_elastic_mod]: Leaf bulk elastic modulus 2.1 ED 2.2 BETY 2.3 Calculation 2.4 Code", " 2 [leaf_elastic_mod]: Leaf bulk elastic modulus 2.1 ED ED variable name : leaf_elastic_mod ED variable units: MPa Note! This is the only case in which MPa is used instead of m! 2.2 BETY Variable id: 1000000294 Prior id: 1000000387 2.3 Calculation 2.3.1 Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: epsil_node (leaf) FATES variable units: MPa 2.3.2 Conversion None! 2.4 Code i &lt;- which(priors$ED_name == &quot;leaf_elastic_mod&quot;) prior_in &lt;- priors[i,] myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_elastic_mod_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000387 already exists. Parameters look the same. Old: gamma(3.4400, 0.1600) New: gamma(3.4400, 0.1600)&quot; leaf_elastic_mod_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_elastic_mod_id) %&gt;% collect() leaf_elastic_mod_prior &lt;- rdistn(leaf_elastic_mod_fit) leaf_elastic_mod_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_elastic_mod&quot;) prior_plot(prior = leaf_elastic_mod_prior, q = c(0,.995), plot_default = leaf_elastic_mod_default, title = sprintf(&quot;Leaf bulk elastic modulus (leaf_elastic_mod): %s&quot;, leaf_elastic_mod_fit$distn), type = &quot;data&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). "],
["leaf-density-density-of-leaf-tissue.html", "3 [leaf_density]: Density of leaf tissue 3.1 ED 3.2 BETY 3.3 Calculation 3.4 Code", " 3 [leaf_density]: Density of leaf tissue 3.1 ED ED variable name : leaf_density ED variable units: kg m-3 3.2 BETY Variable id: 1000000304 Prior id: 1000000396 3.3 Calculation 3.3.1 Expert elicitation No expert elicitation provided by Brad Christoffersen. I will use the equation in ED to calcualte the prior and add min and max values to make sure the distribution does not predict values that are not biologically possible. Values added by Betsy and Felicien: # Leaf_density priors[which(priors$ED_name == &quot;leaf_density&quot;), c(&quot;theor.min&quot;, &quot;theor.max&quot;)] &lt;- c(1e-7, 2000) Copies directly from the ED code: max(0.1 * 1.e3, (leaf_elastic_mod(ipft) - 2.03) / 25.4 * 1.e3) But there is a key step here that we need to think about, which is that in the ED code, 0.1 * 1.e3 is the smallest possible value. I encorporate that information by setting 0.1 * 1.e3 as the min theoretical value when fitting the distribution (but remove the max from the equation when calculating the leaf_density_sample.) leaf_density_sample &lt;- (leaf_elastic_mod_prior - 2.03) / 25.4 * 1.e3 3.3.2 Conversion None 3.4 Code leaf_density_sample &lt;- (leaf_elastic_mod_prior - 2.03) / 25.4 * 1.e3 # Add in the max an min from the priors table i &lt;- which(priors$ED_name == &quot;leaf_density&quot;) prior_in &lt;- priors[i,] # Note here I don&#39;t need to do any units conversion prior_in &lt;- prior_add_samp_data(prior_in, samp = leaf_density_sample) prior_in[,stats] ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.0000001 120. 432. 686. 1012. 1872. 2000 myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == &quot;leaf_density&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_density_default &lt;- (get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_elastic_mod&quot;) - 2.03) / 25.4 * 1.e3 leaf_density_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000396 already exists. Parameters look different. Old: weibull(1.8300, 848.7800) New: weibull(1.8300, 844.9500)&quot; leaf_density_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_density_id) %&gt;% collect() leaf_density_prior &lt;- rdistn(leaf_density_fit) prior_plot(prior = leaf_density_prior, q = c(0,.995), plot_default = leaf_density_default, title = sprintf(&quot;Leaf density (leaf_density): %s&quot;, leaf_density_fit$distn), type = &quot;equation&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). "],
["leaf-water-sat-leaf-water-content-at-saturation.html", "4 [leaf_water_sat]: Leaf water content at saturation 4.1 ED 4.2 BETY 4.3 Calculation 4.4 Code", " 4 [leaf_water_sat]: Leaf water content at saturation 4.1 ED ED variable name : leaf_water_sat ED variable units: kg H2O/kg biomass 4.2 BETY Variable id: 1000000285 Prior id: 1000000414 4.3 Calculation There are a couple ways to approach this: Either build a prior completely from other priors (ie using the equations from ED and a prior for LMA and leaf_density) or try to do a combination where we use the priovided expert elicitation and the prior distribution for leaf_density. I am going to try doing both just to see how they differ. 4.3.1 Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: thetas_node (leaf) FATES variable units: kg kg-1 4.3.2 Conversion The equations between the two are identical except that to get from FATES to ED, must multiply by (water density)/(leaf density) 4.4 Code 4.4.1 Initial testing code leaf_density_prior_1 &lt;- leaf_density_prior leaf_density_prior_2 &lt;- rlnorm(100000, 6.51, .59) # Also trying with lnorm, this is left over from a previous question but I&#39;m including it for now so that the code runs # Following the equation in ED SLA_density &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;SLA&quot;) default_LMA &lt;- 1e3 * 2 / SLA_density # 1.e3 * C2B / SLA(ipft) leaf_water_sat_density &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_water_sat&quot;) leaf_water_sat_default_calc &lt;- (-2.32e4 / default_LMA + 782.) * (1. / (-0.21 * log(1.e4 / default_LMA) + 1.43) - 1.) / leaf_density_default # c(leaf_water_sat_density, leaf_water_sat_default_calc) LMA_prior &lt;- 1e3 * 2 / SLA_prior # Should be analogous to Christoffersen because I&#39;m dividing by wdns instead of leaf_density leaf_water_sat_samp_1_1 &lt;- (-2.32e4 / LMA_prior + 782.) * (1. / (-0.21 * log(1.e4 / LMA_prior) + 1.43) - 1.) / leaf_density_prior_1 leaf_water_sat_samp_1_2 &lt;- (-2.32e4 / LMA_prior + 782.) * (1. / (-0.21 * log(1.e4 / LMA_prior) + 1.43) - 1.) / leaf_density_prior_2 prior_in_1_1 &lt;- data.frame(low.025 = quantile(leaf_water_sat_samp_1_1, c(.025), na.rm = TRUE), low.25 = quantile(leaf_water_sat_samp_1_1, c(.25), na.rm = TRUE), mean = quantile(leaf_water_sat_samp_1_1, c(.5), na.rm = TRUE), upp.75 = quantile(leaf_water_sat_samp_1_1, c(.75), na.rm = TRUE), upp.975 = quantile(leaf_water_sat_samp_1_1, c(.975), na.rm = TRUE)) myfit_1_1 &lt;- prior_get_fit(prior_in_1_1, accepted_dists, plot = FALSE) ## Warning: Unknown columns: `theor.min`, `theor.max` myfit_1_1$score$dist[which.min(myfit_1_1$score$RMSE)] ## [1] &quot;exp&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_1_1 &lt;- rexp(1000, myfit_1_1$dists$exp[1]) prior_in_1_2 &lt;- data.frame(low.025 = quantile(leaf_water_sat_samp_1_2, c(.025), na.rm = TRUE), low.25 = quantile(leaf_water_sat_samp_1_2, c(.25), na.rm = TRUE), mean = quantile(leaf_water_sat_samp_1_2, c(.5), na.rm = TRUE), upp.75 = quantile(leaf_water_sat_samp_1_2, c(.75), na.rm = TRUE), upp.975 = quantile(leaf_water_sat_samp_1_2, c(.975), na.rm = TRUE)) myfit_1_2 &lt;- prior_get_fit(prior_in_1_2, accepted_dists, plot = FALSE) ## Warning: Unknown columns: `theor.min`, `theor.max` myfit_1_2$score$dist[which.min(myfit_1_2$score$RMSE)] ## [1] &quot;lnorm&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_1_2 &lt;- rlnorm(1000, myfit_1_2$dists$lnorm[1], myfit_1_2$dists$lnorm[2]) # Using the data i &lt;- which(priors$ED_name == &quot;leaf_water_sat&quot;) myfit_2 &lt;- prior_get_fit(priors[i,], accepted_dists, plot = FALSE) myfit_2$score$dist[which.min(myfit_2$score$RMSE)] ## [1] &quot;norm&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_2 &lt;- rnorm(1000, myfit_2$dists$norm[1], myfit_2$dists$norm[2]) calc_2_1 &lt;- leaf_water_sat_prior_2 * (wdns/(leaf_density_prior_1)) prior_in_2_1 &lt;- data.frame(low.025 = quantile(calc_2_1, c(.025), na.rm = TRUE), low.25 = quantile(calc_2_1, c(.25), na.rm = TRUE), mean = quantile(calc_2_1, c(.5), na.rm = TRUE), upp.75 = quantile(calc_2_1, c(.75), na.rm = TRUE), upp.975 = quantile(calc_2_1, c(.975), na.rm = TRUE)) myfit_2_1 &lt;- prior_get_fit(prior_in_2_1, accepted_dists, plot = FALSE) ## Warning: Unknown columns: `theor.min`, `theor.max` myfit_2_1$score$dist[which.min(myfit_2_1$score$RMSE)] ## [1] &quot;lnorm&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_2_1 &lt;- rlnorm(1000, myfit_2_1$dists$lnorm[1], myfit_2_1$dists$lnorm[2]) calc_2_2 &lt;- leaf_water_sat_prior_2 * (wdns/(leaf_density_prior_2)) prior_in_2_2 &lt;- data.frame(low.025 = quantile(calc_2_2, c(.025), na.rm = TRUE), low.25 = quantile(calc_2_2, c(.25), na.rm = TRUE), mean = quantile(calc_2_2, c(.5), na.rm = TRUE), upp.75 = quantile(calc_2_2, c(.75), na.rm = TRUE), upp.975 = quantile(calc_2_2, c(.975), na.rm = TRUE)) myfit_2_2 &lt;- prior_get_fit(prior_in_2_2, accepted_dists, plot = FALSE) ## Warning: Unknown columns: `theor.min`, `theor.max` myfit_2_2$score$dist[which.min(myfit_2_2$score$RMSE)] ## [1] &quot;lnorm&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_2_2 &lt;- rlnorm(1000, myfit_2_2$dists$lnorm[1], myfit_2_2$dists$lnorm[2]) df &lt;- data.frame(leaf_water_sat_prior_1_1, leaf_water_sat_prior_1_2, leaf_water_sat_prior_2_1, leaf_water_sat_prior_2_2) df2 &lt;- df %&gt;% gather(key = &quot;prior&quot;) %&gt;% mutate(leaf_dens_dist = case_when( prior == &quot;leaf_water_sat_prior_1_1&quot; ~ &quot;Weibull&quot;, prior == &quot;leaf_water_sat_prior_1_2&quot; ~ &quot;Log Normal&quot;, prior == &quot;leaf_water_sat_prior_2_1&quot; ~ &quot;Weibull&quot;, prior == &quot;leaf_water_sat_prior_2_2&quot; ~ &quot;Log Normal&quot; )) %&gt;% mutate(prior_or_data = case_when( prior == &quot;leaf_water_sat_prior_1_1&quot; ~ &quot;LMA_prior&quot;, prior == &quot;leaf_water_sat_prior_1_2&quot; ~ &quot;LMA_prior&quot;, prior == &quot;leaf_water_sat_prior_2_1&quot; ~ &quot;leaf_water_sat_exp_elicit&quot;, prior == &quot;leaf_water_sat_prior_2_2&quot; ~ &quot;leaf_water_sat_exp_elicit&quot; )) ggplot(data = df2) + geom_density(aes(x = value, color = prior_or_data, linetype = leaf_dens_dist)) + geom_vline(aes(xintercept = leaf_water_sat_density)) + geom_point(aes(x = .03, y = 0)) + geom_point(aes(x = 1.5, y = 0)) + geom_point(aes(x = 2, y = 0)) + xlim(-.25, 4) ## Warning: Removed 55 rows containing non-finite values (stat_density). From this point, we can see that just using the equations in the ED code makes the distributions predict low values which is could be a problem given that these values should not be zero and that the distribution underpredicts both in relation to the default value and the values that Felicien gave me. Thus I would create the prior using the expert elicitation values provided by Brad. I am also comfortable with chooseing the best fit distribution for leaf_density which is the weibull distribution instead of trying to come up with a reason why we should make leaf density log normal instead. The log normal was the best if I didn’t include the lower bound - that’s why I wanted to look at it… 4.4.2 Actual code i &lt;- which(priors$ED_name == &quot;leaf_water_sat&quot;) myfit_0 &lt;- prior_get_fit(priors[i,], accepted_dists, plot = FALSE) myfit_0$score$dist[which.min(myfit_0$score$RMSE)] ## [1] &quot;norm&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_0 &lt;- rnorm(100000, myfit_0$dists$norm[1], myfit_0$dists$norm[2]) leaf_water_sat_sample &lt;- leaf_water_sat_prior_0 * (wdns/(leaf_density_prior)) # plot(density(leaf_water_sat_sample), main = &quot;leaf water sat sample without fitting&quot;) # In this case I&#39;m not using the function I built because here it wouldn&#39;t make sense. prior_in &lt;- data.frame(low.025 = quantile(leaf_water_sat_sample, c(.025), na.rm = TRUE), low.25 = quantile(leaf_water_sat_sample, c(.25), na.rm = TRUE), mean = quantile(leaf_water_sat_sample, c(.5), na.rm = TRUE), upp.75 = quantile(leaf_water_sat_sample, c(.75), na.rm = TRUE), upp.975 = quantile(leaf_water_sat_sample, c(.975), na.rm = TRUE)) myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) ## Warning: Unknown columns: `theor.min`, `theor.max` variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_water_sat_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000414 already exists. Parameters look different. Old: lnorm(-0.0400, 0.6400) New: lnorm(-0.0500, 0.6400)&quot; leaf_water_sat_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_water_sat_prior_id) %&gt;% collect() leaf_water_sat_prior &lt;- rdistn(leaf_water_sat_fit) leaf_water_sat_density &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_water_sat&quot;) prior_plot(prior = leaf_water_sat_prior, q = c(0,.995), plot_default = leaf_water_sat_density, title = sprintf(&quot;Leaf water content at saturation (leaf_water_sat): %s&quot;, leaf_water_sat_fit$distn), type = &quot;mixed&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). "],
["leaf-psi-tlp-leaf-water-potential-at-turgor-loss-point.html", "5 [leaf_psi_tlp]: Leaf water potential at turgor loss point 5.1 ED 5.2 BETY 5.3 Calculation 5.4 Code", " 5 [leaf_psi_tlp]: Leaf water potential at turgor loss point 5.1 ED ED variable name : leaf_psi_tlp ED variable units: m 5.2 BETY Variable id: 1000000284 Prior id: 1000000384 NOTE!! The units are NEGATIVE in the database so we can calculate a distribution that is entirely negative. 5.3 Calculation 5.3.1 Expert elicitation No expert elicitation provided by Brad Christoffersen. I will use the equation in ED to calcualte the prior and add min and max values to make sure the distribution does not predict values that are not biologically possible. Values added by Betsy and Felicien: # Leaf_psi_tlp priors[which(priors$ED_name == &quot;leaf_psi_tlp&quot;), c(&quot;theor.min&quot;, &quot;theor.max&quot;)] &lt;- c(-6, -0.5) Code directly from ED: leaf_elastic_mod(ipft) * (leaf_psi_osmotic(ipft) / MPa2m) / (leaf_elastic_mod(ipft) + leaf_psi_osmotic(ipft) / MPa2m) * MPa2m Thus, leaf_psi_tlp is calculated purely from other parameters: leaf_psi_osmotic and leaf_elastic_mod leaf_psi_tlp_samp &lt;- (leaf_psi_osmotic_prior * (leaf_elastic_mod_prior * MPa2m))/ (leaf_psi_osmotic_prior + (leaf_elastic_mod_prior * MPa2m)) 5.3.2 Conversion Remember that leaf_elastic_mod is MPa, where everything else is m! 5.4 Code leaf_psi_tlp_samp &lt;- (leaf_psi_osmotic_prior * (leaf_elastic_mod_prior * MPa2m))/ (leaf_psi_osmotic_prior + (leaf_elastic_mod_prior * MPa2m)) summary(leaf_psi_tlp_samp) ## Min. 1st Qu. Median Mean 3rd Qu. ## -530664.5309 -326.3599 -231.2641 -242.4036 -153.8798 ## Max. ## 2150453.1535 # Add in the max an min from the priors table i &lt;- which(priors$ED_name == &quot;leaf_psi_tlp&quot;) prior_in &lt;- priors[i,stats] * MPa2m # Convert from MPa to m prior_in &lt;- prior_add_samp_data(prior_in, samp = -leaf_psi_tlp_samp) prior_in[,stats] ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 50.98581065 NA 153.8797733 231.2640932 326.3598902 NA ## theor.max ## 1 611.8297278 myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;leaf_psi_tlp&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_psi_tlp_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000384 already exists. Parameters look different. Old: lnorm(5.4200, 0.5400) New: lnorm(5.4200, 0.5300)&quot; leaf_psi_tlp_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_psi_tlp_prior_id) %&gt;% collect() leaf_psi_tlp_prior &lt;- -rdistn(leaf_psi_tlp_fit) # Remember to flip back over for psi leaf_psi_tlp_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_psi_tlp&quot;) # plot(density(leaf_psi_tlp_prior), main = &quot;leaf_psi_tlp prior&quot;) # abline(v = get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_psi_tlp&quot;), col = &quot;blue&quot;, lwd = 2) # abline(v = quantile(leaf_psi_osmotic_prior, c(.025, .975)), lty = 2) # legend(&quot;topleft&quot;,legend=c(&quot;Prior&quot;, &quot;95% CI&quot;, &quot;ED PFT 3 Default&quot;), col=c(&quot;black&quot;, &quot;black&quot;,&quot;blue&quot;), lwd = c(2,1,2), lty = c(1,2,1)) prior_plot(prior = leaf_psi_tlp_prior, q = c(.005,1), plot_default = leaf_psi_tlp_default, title = sprintf(&quot;(leaf_psi_tlp): %s&quot;, leaf_psi_tlp_fit$distn), type = &quot;equation&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). "],
["leaf-water-cap-leaf-hydaulic-capacitance-.html", "6 [leaf_water_cap]: Leaf hydaulic capacitance. 6.1 ED 6.2 BETY 6.3 Calculation 6.4 Code", " 6 [leaf_water_cap]: Leaf hydaulic capacitance. 6.1 ED ED variable name : leaf_water_cap ED variable units: kg H2O/kg biomass/m 6.2 BETY Variable id: 1000000287 Prior id: 1000000405 NOTE: units in BETY are g H2O / kg biomass / m! This is because we needed to multiply by 1000 to get large enough values to fit the distribution. 6.3 Calculation 6.3.1 Expert elicitation No expert elicitation provided by Brad Christoffersen. I will use the equation in ED to calcualte the prior and add min and max values to make sure the distribution does not predict values that are not biologically possible. Values added by Betsy and Felicien: # Leaf_water_cap priors[which(priors$ED_name == &quot;leaf_water_cap&quot;), c(&quot;theor.min&quot;, &quot;theor.max&quot;)] &lt;- c(1e-7, NA) Equation copied directly from ED: (1. - leaf_psi_osmotic(ipft) / (4. * leaf_psi_tlp(ipft))) * leaf_water_sat(ipft) / (4. * abs(leaf_psi_tlp(ipft))) 6.3.2 Conversion Don’t forget about the switch from kg to g! 6.4 Code leaf_water_cap_samp &lt;- 1000 * (1 - leaf_psi_osmotic_prior / (4 * leaf_psi_tlp_prior)) * (leaf_water_sat_prior / (4 * abs(leaf_psi_tlp_prior))) # * (wdns/leaf_density_prior) leaf_water_cap_samp &lt;- leaf_water_cap_samp[0 &lt; leaf_water_cap_samp] default_leaf_water_cap &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_water_cap&quot;) plot(density(leaf_water_cap_samp)) abline(v = default_leaf_water_cap) # Add in the max an min from the priors table i &lt;- which(priors$ED_name == &quot;leaf_water_cap&quot;) prior_in &lt;- priors[i,stats] prior_in[,&quot;theor.min&quot;] &lt;- NA # prior_in[,&quot;theor.max&quot;] &lt;- max(.35 * (1/MPa2m) * (wdns/leaf_density_prior) ) prior_in &lt;- prior_add_samp_data(prior_in, samp = leaf_water_cap_samp) prior_in[,stats] ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;lgl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 NA 0.161 0.445 0.746 1.24 3.27 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;leaf_water_cap&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_water_cap_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000405 already exists. Parameters look different. Old: lnorm(-0.2900, 0.7600) New: lnorm(-0.3000, 0.7600)&quot; leaf_water_cap_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_water_cap_prior_id) %&gt;% collect() leaf_water_cap_prior &lt;- rdistn(leaf_water_cap_fit) * (1/1000) leaf_water_cap_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_water_cap&quot;) prior_plot(prior = leaf_water_cap_prior, q = c(0,.975), plot_default = leaf_water_cap_default, title = sprintf(&quot;(leaf_water_cap): %s&quot;, leaf_water_cap_fit$distn), type = &quot;equation&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). "],
["leaf-psi-min-leaf-minimum-water-potential.html", "7 [leaf_psi_min]: Leaf minimum water potential 7.1 ED 7.2 BETY 7.3 Calculation 7.4 Code", " 7 [leaf_psi_min]: Leaf minimum water potential This is calculated from [leaf_rwc_min]: Leaf minimum relative water content or leaf residual fraction, which I have not added to BETY. 7.1 ED ED variable name : leaf_psi_min ED variable units: m 7.2 BETY Variable id: 1000000299 Prior id: 1000000392 NOTE!! The units are NEGATIVE in the database so we can calculate a distribution that is entirely negative. 7.3 Calculation 7.3.1 Expert elicitation No expert elicitation provided by Brad Christoffersen. I will use the equation in ED to calcualte the prior and add min and max values to make sure the distribution does not predict values that are not biologically possible. Values added by Betsy and Felicien: # Leaf_psi_min priors[which(priors$ED_name == &quot;leaf_psi_min&quot;), c(&quot;theor.min&quot;, &quot;theor.max&quot;)] &lt;- c(-700, -0.1) Code copied from ED: leaf_rwc_min = 0.01 * leaf_elastic_mod(ipft) + 0.17 leaf_psi_min = (leaf_rwc_min(ipft) - 1.) * leaf_water_sat(ipft) / leaf_water_cap(ipft) 7.3.2 Conversion None 7.4 Code leaf_rwc_min_samp = 0.01 * leaf_elastic_mod_prior + 0.17 leaf_psi_min_samp = (leaf_rwc_min_samp - 1.) * leaf_water_sat_prior / leaf_water_cap_prior # Add in the max an min from the priors table i &lt;- which(priors$ED_name == &quot;leaf_psi_min&quot;) prior_in &lt;- priors[i,stats] * MPa2m # Convert from MPa to m prior_in &lt;- prior_add_samp_data(prior_in, samp = -leaf_psi_min_samp) prior_in[,stats] ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 10.19716213 101.00209 388.5142946 773.9287357 1529.774979 5543.189349 ## theor.max ## 1 71380.13491 myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;leaf_psi_min&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_psi_min_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000392 already exists. Parameters look the same. Old: lnorm(6.6500, 1.0200) New: lnorm(6.6500, 1.0200)&quot; leaf_psi_min_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_psi_min_prior_id) %&gt;% collect() leaf_psi_min_prior &lt;- -rdistn(leaf_psi_min_fit) # Remember to flip psi default_leaf_psi_min &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_psi_min&quot;) prior_plot(prior = leaf_psi_min_prior, q = c(.025,1), plot_default = default_leaf_psi_min, title = sprintf(&quot;leaf_psi_min: %s&quot;, leaf_psi_min_fit$distn), type = &quot;equation&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). "],
["wood-psi-osmotic-sapwood-osmotic-water-potential-at-saturation.html", "8 [wood_psi_osmotic]: Sapwood osmotic water potential at saturation 8.1 ED 8.2 BETY 8.3 Calculation", " 8 [wood_psi_osmotic]: Sapwood osmotic water potential at saturation 8.1 ED ED variable name : wood_psi_osmotic ED variable units: m 8.2 BETY Variable id: 1000000298 Prior id: 1000000410 NOTE!! The units are NEGATIVE in the database so we can calculate a distribution that is entirely negative. 8.3 Calculation 8.3.1 Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: pinot_node (stem) FATES variable units: m 8.3.2 Conversion MPa to m 8.3.3 Code i &lt;- which(priors$ED_name == &quot;wood_psi_osmotic&quot;) prior_in &lt;- priors[i, stats] * MPa2m myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) myfit$score$dist[which.min(myfit$score$RMSE)] ## [1] &quot;weibull&quot; variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_psi_osmotic_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000410 already exists. Parameters look the same. Old: weibull(2.4100, 237.4600) New: weibull(2.4100, 237.4600)&quot; wood_psi_osmotic_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_psi_osmotic_prior_id) %&gt;% collect() wood_psi_osmotic_prior &lt;- -rdistn(wood_psi_osmotic_fit) wood_psi_osmotic_default &lt;- get_ED_default(PFT3_defaults_history, &quot;wood_psi_osmotic&quot;) prior_plot(prior = wood_psi_osmotic_prior, q = c(0,1), plot_default = wood_psi_osmotic_default, title = sprintf(&quot;Sapwood osmotic water potential at saturation (wood_psi_osmotic): %s&quot;, wood_psi_osmotic_fit$distn), type = &quot;data&quot;) "],
["wood-elastic-mod-sapwood-bulk-elastic-modulus.html", "9 [wood_elastic_mod]: Sapwood bulk elastic modulus 9.1 ED 9.2 BETY 9.3 Calculation 9.4 Code", " 9 [wood_elastic_mod]: Sapwood bulk elastic modulus 9.1 ED ED variable name : wood_elastic_mod ED variable units: MPa Note! This is the only case in which MPa is used instead of m! 9.2 BETY Variable id: 1000000303 Prior id: 1000000394 9.3 Calculation 9.3.1 Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: epsil_node (stem) FATES variable units: MPa 9.3.2 Conversion None! 9.4 Code i &lt;- which(priors$ED_name == &quot;wood_elastic_mod&quot;) prior_in &lt;- priors[i,] myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_elastic_mod_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000394 already exists. Parameters look the same. Old: gamma(3.4400, 0.1600) New: gamma(3.4400, 0.1600)&quot; wood_elastic_mod_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_elastic_mod_id) %&gt;% collect() wood_elastic_mod_prior &lt;- rdistn(wood_elastic_mod_fit) wood_elastic_mod_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_elastic_mod&quot;) prior_plot(prior = wood_elastic_mod_prior, q = c(0,1), plot_default = wood_elastic_mod_default, title = sprintf(&quot;wood bulk elastic modulus (wood_elastic_mod): %s&quot;, wood_elastic_mod_fit$distn), type = &quot;data&quot;) # [wood_water_sat]: Sapwood water content at saturation ## ED - ED variable name: wood_water_sat - ED variable units: kg H2O/kg biomass ## BETY - Variable id: - Prior id: ## Calculation ### Expert elicitation Expert elicitation provided by Brad Christoffersen - FATES variable name: thetas_node (stem) - FATES variable units: kg kg-1 ### Conversion multiply by the density of water over wood density ## Code ```r i &lt;- which(priors$ED_name == “wood_water_sat”) myfit_0 &lt;- prior_get_fit(priors[i,], accepted_dists, plot = FALSE) myfit_0\\(score\\)dist[which.min(myfit_0\\(score\\)RMSE)] ## [1] “norm” # I’m skipping steps here for the sake of time and sanity # Normal is the best fit wood_water_sat_prior_0 &lt;- rnorm(100000, myfit_0\\(dists\\)norm[1], myfit_0\\(dists\\)norm[2]) wood_water_sat_sample &lt;- wood_water_sat_prior_0 * (wdns/(wood_density_prior * 1e3)) # Note that here we have to multiply by 1e3 because of the units of wood density # In this case I’m not using the function I built because here it wouldn’t make sense. prior_in &lt;- data.frame(low.025 = quantile(wood_water_sat_sample, c(.025), na.rm = TRUE), low.25 = quantile(wood_water_sat_sample, c(.25), na.rm = TRUE), mean = quantile(wood_water_sat_sample, c(.5), na.rm = TRUE), upp.75 = quantile(wood_water_sat_sample, c(.75), na.rm = TRUE), upp.975 = quantile(wood_water_sat_sample, c(.975), na.rm = TRUE)) myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) ## Warning: Unknown columns: theor.min, theor.max ``` ```r variable_id.in &lt;- tbl(bety,“variables”) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- “plants” best.fit.name &lt;- myfit\\(score\\)dist[which.min(myfit\\(score\\)RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(“Name”, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_water_sat_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == “Para1”) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == “Para2”) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == “Para3”) %&gt;% pull(value)) ## [1] “Entry with id = 1000000415 already exists. Parameters look different. Old: gamma(14.2200, 16.8600) New: gamma(14.2200, 16.8700)” ``` ```r wood_water_sat_fit &lt;- tbl(bety, “priors”) %&gt;% filter(id == wood_water_sat_prior_id) %&gt;% collect() wood_water_sat_prior &lt;- rdistn(wood_water_sat_fit) wood_water_sat_density &lt;- get_ED_default(“/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml”, “wood_water_sat”) prior_plot(prior = wood_water_sat_prior, q = c(0,.995), plot_default = wood_water_sat_density, title = sprintf(“Wood water content at saturation (wood_water_sat): %s”, wood_water_sat_fit$distn), type = “mixed”) ## Warning: Removed 500 rows containing non-finite values (stat_density). ``` "],
["wood-psi-tlp-sapwood-water-potential-at-turgor-loss-point.html", "10 [wood_psi_tlp]: Sapwood water potential at turgor loss point 10.1 ED 10.2 BETY 10.3 Calculation 10.4 Code", " 10 [wood_psi_tlp]: Sapwood water potential at turgor loss point 10.1 ED ED variable name: wood_psi_tlp ED variable units: m 10.2 BETY Variable id: `` Prior id: `` NOTE!! The units are NEGATIVE in the database so we can calculate a distribution that is entirely negative. 10.3 Calculation 10.3.1 Expert elicitation No expert elicitation provided by Brad Christoffersen. There is a FATES parameter but it is calculated from other parameters FATES variable name: pitlp_node FATES variable units: MPa Constraints we added - wood_psi_tlp &gt; .1 MPa (this was given as a boundary for other psi variables) 10.3.2 Conversion Calculated from other parameters: wood_psi_osmotic and wood_elastic_mod Remember that wood_elastic_mod is MPa, where everything else is m! 10.4 Code wood_psi_tlp_samp = (wood_psi_osmotic_prior * wood_elastic_mod_prior * MPa2m)/ (wood_psi_osmotic_prior + wood_elastic_mod_prior * MPa2m) wood_psi_tlp_samp &lt;- (wood_psi_osmotic_prior * wood_elastic_mod_prior * MPa2m)/ (wood_psi_osmotic_prior + wood_elastic_mod_prior * MPa2m) summary(wood_psi_tlp_samp) ## Min. 1st Qu. Median Mean 3rd Qu. ## -263987.8160 -326.8883 -232.0214 -245.3324 -154.7237 ## Max. ## 410076.6593 i &lt;- which(priors$ED_name == &quot;wood_psi_tlp&quot;) prior_in &lt;- priors[i,stats] * MPa2m # Convert from MPa to m prior_in &lt;- prior_add_samp_data(prior_in, samp = -wood_psi_tlp_samp) prior_in[,stats] ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 10.19716213 50.85331646 154.7237132 232.0213628 326.8883405 614.3778395 ## theor.max ## 1 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;wood_psi_tlp&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_psi_tlp_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000416 already exists. Parameters look the same. Old: lnorm(5.4300, 0.5500) New: lnorm(5.4300, 0.5500)&quot; wood_psi_tlp_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_psi_tlp_prior_id) %&gt;% collect() wood_psi_tlp_prior &lt;- -rdistn(wood_psi_tlp_fit) # Remember to flip back over for psi wood_psi_tlp_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_psi_tlp&quot;) prior_plot(prior = wood_psi_tlp_prior, q = c(.005,1), plot_default = wood_psi_tlp_default, title = sprintf(&quot;(wood_psi_tlp): %s&quot;, wood_psi_tlp_fit$distn), type = &quot;equation&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). "],
["wood-water-cap-wood-hydaulic-capacitance.html", "11 [wood_water_cap]: Wood hydaulic capacitance 11.1 ED 11.2 BETY 11.3 Calculation 11.4 Code", " 11 [wood_water_cap]: Wood hydaulic capacitance 11.1 ED ED variable name : wood_water_cap ED variable units: kg H2O/kg biomass/m 11.2 BETY Different units in BETY so we can fit a distribution! The numbers were so small that I couldn’t get the fitting function to work until I scaled the variable up! BETY varaible units: g H2O / kg biomass / m 11.3 Calculation 11.3.1 Expert elicitation No expert elicitation provided by Brad Christoffersen. Constraints we added - wood_water_cap &gt; 1e-07 kg H2O/kg biomass/m 11.4 Code wood_water_cap_samp &lt;- 1000 * (1 - wood_psi_osmotic_prior / (4 * wood_psi_tlp_prior)) * (wood_water_sat_prior / (4 * abs(wood_psi_tlp_prior))) summary(wood_water_cap_samp) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -19.2405522 0.4487422 0.6273092 0.6850476 0.8707191 6.3937344 i &lt;- which(priors$ED_name == &quot;wood_water_cap&quot;) prior_in &lt;- priors[i,stats] prior_in &lt;- prior_add_samp_data(prior_in, samp = wood_water_cap_samp) prior_in[,stats] ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.0000001 0.187 0.449 0.627 0.871 1.61 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;wood_water_cap&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_water_cap_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000417 already exists. Parameters look the same. Old: lnorm(-0.4700, 0.4900) New: lnorm(-0.4700, 0.4900)&quot; wood_water_cap_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_water_cap_prior_id) %&gt;% collect() wood_water_cap_prior &lt;- rdistn(wood_water_cap_fit) * (1/1000) # Convert back to kg wood_water_cap_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_water_cap&quot;) prior_plot(prior = wood_water_cap_prior, q = c(0,.975), plot_default = wood_water_cap_default, title = sprintf(&quot;(wood_water_cap): %s&quot;, wood_water_cap_fit$distn), type = &quot;equation&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). "],
["wood-psi-min-sapwood-minimum-relative-water-content-or-sapwood-residual-fraction.html", "12 [wood_psi_min]: Sapwood minimum relative water content or Sapwood residual fraction 12.1 ED 12.2 BETY 12.3 Calculation 12.4 Code", " 12 [wood_psi_min]: Sapwood minimum relative water content or Sapwood residual fraction 12.1 ED ED variable name : wood_psi_min Ed variable units: m 12.2 BETY Negative units in BETY so we can fit a distribution! BETY varaible units: -m 12.3 Calculation 12.3.1 Expert elicitation There are no FATES parameters Constraints we added - wood_psi_min &gt; .1 MPa (this was given as a boundary for other psi variables) 12.4 Code Calculated from other priors. Should I put wood_rwc_min and rwc_tlp_wood in the database too? rwc_tlp_wood_samp &lt;- 1. - (1. - 0.75 * wood_density_prior) / (2.74 + 2.01 * wood_density_prior) wood_rwc_min_samp = wood_elastic_mod_prior * (1. - rwc_tlp_wood_samp) / (wood_psi_osmotic_prior / MPa2m) + 1. wood_psi_min_samp = (wood_rwc_min_samp - 1.) * wood_water_sat_prior / wood_water_cap_prior # Add in the max an min from the priors table i &lt;- which(priors$ED_name == &quot;wood_psi_min&quot;) prior_in &lt;- priors[i,stats] * MPa2m # Convert from MPa to m prior_in &lt;- prior_add_samp_data(prior_in, samp = -wood_psi_min_samp) prior_in[,stats] ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 10.19716213 213.0967149 765.4734884 1477.300076 2865.072213 10818.67671 ## theor.max ## 1 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;wood_psi_min&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_psi_min_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000419 already exists. Parameters look the same. Old: lnorm(7.3000, 0.9800) New: lnorm(7.3000, 0.9800)&quot; wood_psi_min_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_psi_min_prior_id) %&gt;% collect() wood_psi_min_prior &lt;- -rdistn(wood_psi_min_fit) # Remember to flip psi default_wood_psi_min &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_psi_min&quot;) prior_plot(prior = wood_psi_min_prior, q = c(.025,1), plot_default = default_wood_psi_min, title = sprintf(&quot;wood_psi_min: %s&quot;, wood_psi_min_fit$distn), type = &quot;equation&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). "],
["wood-kmax-maximum-hydraulic-conductivity-of-the-stem.html", "13 [wood_Kmax]: Maximum hydraulic conductivity of the stem 13.1 ED 13.2 BETY 13.3 Calculation 13.4 Code", " 13 [wood_Kmax]: Maximum hydraulic conductivity of the stem 13.1 ED ED variable name : wood_Kmax ED variable units: kg H2O / m / s Note! This is the only case in which MPa is used instead of m! 13.2 BETY 13.3 Calculation 13.3.1 Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: kmax_node FATES variable units: kg m-1 s-1 MPa-1 13.3.2 Conversion I don’t think we need to multiply by the density of water … which is confusing. 13.4 Code i &lt;- which(priors$ED_name == &quot;wood_Kmax&quot;) prior_in &lt;- priors[i, stats] / MPa2m myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) myfit$score$dist[which.min(myfit$score$RMSE)] ## [1] &quot;exp&quot; variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_Kmax_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000418 already exists. Parameters look the same. Old: exp(32.6600) New: exp(32.6600)&quot; wood_Kmax_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_Kmax_prior_id) %&gt;% collect() wood_Kmax_prior &lt;- rdistn(wood_Kmax_fit) # NOTE: Need to convert to m from -m wood_Kmax_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_Kmax&quot;) prior_plot(prior = wood_Kmax_prior, q = c(0,.975), plot_default = wood_Kmax_default, title = sprintf(&quot;Maximum hydraulic conductivity of the stem (wood_Kmax): %s&quot;, wood_Kmax_fit$distn), type = &quot;data&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). "],
["wood-psi50-water-potential-at-which-50-of-stem-conductivity-is-lost.html", "14 [wood_psi50]: Water potential at which 50% of stem conductivity is lost 14.1 ED 14.2 BETY 14.3 Calculation 14.4 Code", " 14 [wood_psi50]: Water potential at which 50% of stem conductivity is lost 14.1 ED ED variable name : wood_psi50 ED variable units: m 14.2 BETY Negative units in BETY so we can fit a distribution! BETY varaible units: -m 14.3 Calculation NOTE: There is an ERROR in the ED code for the equation for wood_psi50 Should be: (-1.09-(3.57 * rho(ipft) ^ 1.73) * MPa2m This one is tricky, do we keep the normal distribution because it’s the best fit? 14.3.1 Expert elicitation FATES varaiable name: p50_node (stem) FATES variable units: MPa 14.3.2 Conversion MPa to m 14.4 Code 14.4.1 Using the best fit norm i &lt;- which(priors$ED_name == &quot;wood_psi50&quot;) prior_in &lt;- priors[i, stats] * MPa2m prior_in ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 10.19716213 50.98581065 101.9716213 NA 407.8864852 611.8297278 ## theor.max ## 1 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) myfit$score$dist[which.min(myfit$score$RMSE)] ## [1] &quot;norm&quot; variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_psi50_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000360 already exists. Parameters look the same. Old: norm(284.6500, 176.3200) New: norm(284.6500, 176.3200)&quot; wood_psi50_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_psi50_prior_id) %&gt;% collect() wood_psi50_prior &lt;- -rdistn(wood_psi50_fit) # NOTE: Need to convert to m from -m # Calculating default by hand because it is calculated wrong in ED! wood_psi50_default &lt;- (-1.09 - (3.57 * wood_density_default ^ 1.73)) * MPa2m wrong_wood_psi50_default &lt;- get_ED_default(PFT3_defaults_history, &quot;wood_psi50&quot;) p &lt;- prior_plot(prior = wood_psi50_prior, q = c(0,1), plot_default = wood_psi50_default, title = sprintf(&quot;Water potential at which 50perc. of stem cond. is lost (wood_psi50): %s&quot;, wood_psi50_fit$distn), type = &quot;data&quot;) p + geom_vline(aes(xintercept = wrong_wood_psi50_default), color = &quot;gray&quot;, linetype = &quot;dashed&quot;) + geom_vline(aes(xintercept = quantile(wood_psi50_prior, .975)), color = &quot;blue&quot;, linetype = &quot;dashed&quot;) quantile(wood_psi50_prior, .975) ## 97.5% ## 58.96267509 A positive number is within the 95% CI of the distribution so in this case, I’m going to choose a log normal distriburtion even though it is not the best fit. Hopefully this can also be fixed given that we have data for both psi50 and Kexp… 14.4.2 Using more realistic lnorm best.fit.name &lt;- &quot;lnorm&quot; best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_psi50_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000420 already exists. Parameters look the same. Old: lnorm(5.2800, 0.8500) New: lnorm(5.2800, 0.8500)&quot; wood_psi50_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_psi50_prior_id) %&gt;% collect() wood_psi50_prior &lt;- -rdistn(wood_psi50_fit) # NOTE: Need to convert to m from -m # Calculating default by hand because it is calculated wrong in ED! wood_psi50_default &lt;- (-1.09 - (3.57 * wood_density_default ^ 1.73)) * MPa2m wrong_wood_psi50_default &lt;- get_ED_default(PFT3_defaults_history, &quot;wood_psi50&quot;) prior_plot(prior = wood_psi50_prior, q = c(0.025,1), plot_default = wood_psi50_default, title = sprintf(&quot;Water potential at which 50perc. of stem cond. is lost (wood_psi50): %s&quot;, wood_psi50_fit$distn), type = &quot;data&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). "],
["wood-kexp-exponent-for-the-hydraulic-vulnerability-curve-of-stem-conductivity.html", "15 [wood_Kexp]: Exponent for the hydraulic vulnerability curve of stem conductivity 15.1 ED 15.2 BETY 15.3 Calculation 15.4 Code", " 15 [wood_Kexp]: Exponent for the hydraulic vulnerability curve of stem conductivity … under the Weibull function 1/(1+(psi/psi50) ^ Kexp_stem) 15.1 ED ED variable name : wood_Kexp ED variable units: unitless 15.2 BETY 15.3 Calculation 15.3.1 Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: avuln_node (stem) FATES variable units: unitless 15.3.2 Conversion None! 15.4 Code i &lt;- which(priors$ED_name == &quot;wood_Kexp&quot;) prior_in &lt;- priors[i, stats] prior_in ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.1 1 10 NA 100 200 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) myfit$score$dist[which.min(myfit$score$RMSE)] ## [1] &quot;exp&quot; variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_Kexp_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000421 already exists. Parameters look the same. Old: exp(0.0200) New: exp(0.0200)&quot; wood_Kexp_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_Kexp_prior_id) %&gt;% collect() wood_Kexp_prior &lt;- rdistn(wood_Kexp_fit) # Calculating default by hand because psi50 is calculated wrong in ED! wood_Kexp_default &lt;- 0.544 * 4. * (-wood_psi50_default / MPa2m) ^ (-0.17) wrong_wood_Kexp_default &lt;- get_ED_default(PFT3_defaults_history, &quot;wood_Kexp&quot;) p &lt;- prior_plot(prior = wood_Kexp_prior, q = c(0,.975), plot_default = wood_Kexp_default, title = sprintf(&quot;Water potential at which 50perc. of stem cond. is lost (wood_Kexp): %s&quot;, wood_Kexp_fit$distn), type = &quot;data&quot;) p + geom_vline(aes(xintercept = wrong_wood_Kexp_default), color = &quot;gray&quot;, linetype = &quot;dashed&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). Note: here the miscalculation of psi50 in the code barely shows up because the value is divided by a large number. "],
["comparing-data-to-priors.html", "16 Comparing Data to Priors 16.1 Wood Density 16.2 SLA 16.3 Kmax 16.4 Psi50 16.5 Kexp", " 16 Comparing Data to Priors To do this section, I really should just use the “get trait data” function that is used in pecan because that will show me where/how to deal with the changes in variable units, both for all the psi variables that are negative but also for the variables that are multiplied by 1000. bety &lt;- betyConnect(&quot;/fs/data3/ecowdery/pecan/web/config.php&quot;) pftid &lt;- 1000000131 tropical_species &lt;- tbl(bety, &quot;pfts&quot;) %&gt;% dplyr::rename(pft_id = id) %&gt;% filter(pft_id == pftid) %&gt;% inner_join(., tbl(bety, &quot;pfts_species&quot;), by = &quot;pft_id&quot;) %&gt;% inner_join(., tbl(bety, &quot;species&quot;) %&gt;% dplyr::rename(specie_id = id), by = &quot;specie_id&quot;) %&gt;% dplyr::select(one_of(&quot;pft_id&quot;, &quot;name&quot;, &quot;specie_id&quot;, &quot;genus&quot;, &quot;species&quot;, &quot;scientificname&quot;)) %&gt;% collect() variables &lt;- c( &quot;SLA&quot;, &quot;wood_density&quot;, &quot;leaf_elastic_mod&quot;, &quot;wood_elastic_mod&quot;, &quot;leaf_psi_osmotic&quot;, &quot;wood_psi_osmotic&quot;, &quot;rwc_tlp_wood&quot;, &quot;leaf_water_sat&quot;, &quot;wood_water_sat&quot;, &quot;leaf_water_cap&quot;, &quot;wood_water_cap&quot;, &quot;leaf_psi_min&quot;, &quot;wood_psi_min&quot;, &quot;wood_Kmax&quot;, &quot;wood_psi50&quot;, &quot;wood_Kexp&quot; ) variables_ids &lt;- lapply(variables, function(v) tbl(bety, &quot;variables&quot;) %&gt;% filter(name == v) %&gt;% pull(id)) %&gt;% unlist() v_df &lt;- data.frame(variables, variables_ids) species_ids &lt;- unique(tropical_species$specie_id) trait_data &lt;- tbl(bety, &quot;traits&quot;) %&gt;% filter(specie_id %in% species_ids) %&gt;% filter(variable_id %in% variables_ids) %&gt;% collect() 16.1 Wood Density v_id &lt;- v_df %&gt;% filter(variables == &quot;wood_density&quot;) %&gt;% pull(variables_ids) wood_density_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(variable_id == v_id) %&gt;% filter(id == 1000000281) %&gt;% collect() wood_density_prior &lt;- rdistn(wood_density_fit) wood_density_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;rho&quot;) p &lt;- prior_plot(prior = wood_density_prior, plot_default = wood_density_default, title = sprintf(&quot;(wood_density): %s&quot;, wood_density_fit$distn), type = &quot;prior&quot;) p # obs &lt;- trait_data %&gt;% filter(variable_id == v_df$variables_ids[v_df$variables == &quot;wood_density&quot;]) # p + geom_density(data = obs, aes(x = mean, fill = &quot;obs&quot;), alpha = .3, color = NA) 16.2 SLA v_id &lt;- v_df %&gt;% filter(variables == &quot;SLA&quot;) %&gt;% pull(variables_ids) SLA_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(variable_id == v_id) %&gt;% filter(id == 142) %&gt;% collect() SLA_prior &lt;- rdistn(SLA_fit) SLA_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;SLA&quot;) p &lt;- prior_plot(prior = SLA_prior, plot_default = SLA_default, title = sprintf(&quot;(SLA): %s&quot;, SLA_fit$distn), type = &quot;prior&quot;) obs &lt;- trait_data %&gt;% filter(variable_id == v_df$variables_ids[v_df$variables == &quot;SLA&quot;]) obs$mean &lt;- obs$mean p + geom_density(data = obs, aes(x = mean, fill = &quot;obs&quot;), alpha = .3, color = NA) 16.3 Kmax wood_Kmax_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_Kmax_prior_id) %&gt;% collect() wood_Kmax_prior &lt;- rdistn(wood_Kmax_fit) # NOTE: Need to convert to m from -m wood_Kmax_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_Kmax&quot;) p &lt;- prior_plot(prior = wood_Kmax_prior, q = c(0,.995), plot_default = wood_Kmax_default, title = sprintf(&quot;Maximum hydraulic conductivity of the stem (wood_Kmax): %s&quot;, wood_Kmax_fit$distn), type = &quot;prior&quot;) obs &lt;- trait_data %&gt;% filter(variable_id == v_df$variables_ids[v_df$variables == &quot;wood_Kmax&quot;]) obs$mean &lt;- obs$mean p + geom_density(data = obs, aes(x = mean, fill = &quot;obs&quot;), alpha = .3, color = NA) ## Warning: Removed 500 rows containing non-finite values (stat_density). 16.4 Psi50 wood_psi50_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_psi50_prior_id) %&gt;% collect() wood_psi50_prior &lt;- -rdistn(wood_psi50_fit) # NOTE: Need to convert to m from -m # Calculating default by hand because it is calculated wrong in ED! wood_psi50_default &lt;- (-1.09 - (3.57 * wood_density_default ^ 1.73)) * MPa2m wrong_wood_psi50_default &lt;- get_ED_default(PFT3_defaults_history, &quot;wood_psi50&quot;) p &lt;- prior_plot(prior = wood_psi50_prior, q = c(0.025,1), plot_default = wood_psi50_default, title = sprintf(&quot;Water potential at which 50perc. of stem cond. is lost (wood_psi50): %s&quot;, wood_psi50_fit$distn), type = &quot;prior&quot;) obs &lt;- trait_data %&gt;% filter(variable_id == v_df$variables_ids[v_df$variables == &quot;wood_psi50&quot;]) obs$mean &lt;- obs$mean p + geom_density(data = obs, aes(x = mean, fill = &quot;obs&quot;), alpha = .3, color = NA) ## Warning: Removed 2500 rows containing non-finite values (stat_density). 16.5 Kexp wood_Kexp_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_Kexp_prior_id) %&gt;% collect() wood_Kexp_prior &lt;- rdistn(wood_Kexp_fit) # Calculating default by hand because psi50 is calculated wrong in ED! wood_Kexp_default &lt;- 0.544 * 4. * (-wood_psi50_default / MPa2m) ^ (-0.17) wrong_wood_Kexp_default &lt;- get_ED_default(PFT3_defaults_history, &quot;wood_Kexp&quot;) p &lt;- prior_plot(prior = wood_Kexp_prior, q = c(0,.5), plot_default = wood_Kexp_default, title = sprintf(&quot;Water potential at which 50perc. of stem cond. is lost (wood_Kexp): %s&quot;, wood_Kexp_fit$distn), type = &quot;prior&quot;) obs &lt;- trait_data %&gt;% filter(variable_id == v_df$variables_ids[v_df$variables == &quot;wood_Kexp&quot;]) p + geom_density(data = obs, aes(x = mean, fill = &quot;obs&quot;), alpha = .3, color = NA) ## Warning: Removed 50000 rows containing non-finite values (stat_density). "],
["taxonomic-name-resolution-when-importing-data-in-to-bety.html", "17 Taxonomic Name Resolution when Importing Data in to BETY 17.1 Name Resolution 17.2 Building a Tropical PFT 17.3 The point of all this 17.4 Cases", " 17 Taxonomic Name Resolution when Importing Data in to BETY 17.1 Name Resolution When users have plant trait data that they want to enter in to the database, the data needs to attributed to a specific species database entry. When the user has no other information (such as ID codes such as the USDA and FIA codes) the only way to match the species in the data with species entry in the database is through matching of scientific names. But it may be the case that the accepted scientific name has changed since the data was collected (and/or published), or that the data itself contains errors (typos or otherwise) such that the names in the data are not matching with anything that has already been entered in to BETY. It is also the case that BETY does not have a complete record. At this point we need to employ additional tools to help us in resolving taxonomic names. Already in the PEcAn code there exists match_species_id: But this cannot account for fuzzy matching of names (ie spelling errors) and synonyms. 94.match.species: This code is specific to importing data from thr TRY database and experiments with some partial matching through grep statements, but again does not account for synonyms. Outside of PEcAn, there is the Taxonomic Name Resolution Service Additionally, there is an R package taxize which, among other things, provides an R interface between TNRS and R. I recommend checking out their vignettes - you can also just access them on their github. 17.2 Building a Tropical PFT the goal of all of this is not only to import trait data, but to build a PFT that I can used to do runs in the tropics. (How general should this PFT be? That’s a good question!) Right now I’m using a clone of the tropical PFT that was made to be used with FATES. Thus it contains all the imported BETY entries from the ForestGEO Neotropical tree database (http://ctfs.si.edu/webatlas/neotropicaltree/) and more. There are currently 22286 species linked to the PFT, 20811 of which are the ForestGEO entries. If I’m importing data with species that are not in the existing PFT, I need to decide if they should be added. And I suppose I should also make sure there aren’t any species in the PFT that shouldn’t be there. This is something that I have no expertise in so I would like advice. pftid &lt;- 1000000131 PFT_species &lt;- tbl(bety, &quot;pfts&quot;) %&gt;% dplyr::rename(pft_id = id) %&gt;% filter(pft_id == pftid) %&gt;% inner_join(., tbl(bety, &quot;pfts_species&quot;), by = &quot;pft_id&quot;) %&gt;% inner_join(., tbl(bety, &quot;species&quot;) %&gt;% dplyr::rename(specie_id = id), by = &quot;specie_id&quot;) %&gt;% dplyr::select(one_of(&quot;pft_id&quot;, &quot;name&quot;, &quot;specie_id&quot;, &quot;genus&quot;, &quot;species&quot;, &quot;scientificname&quot;, &quot;notes&quot;)) %&gt;% collect() # Check that all the ForestGEO species are in the PFT (they are) nForestGEO &lt;- tbl(bety, &quot;species&quot;) %&gt;% filter(str_detect(notes, &quot;ForestGEO&quot;)) %&gt;% collect() %&gt;% nrow() PFT_species %&gt;% filter(str_detect(PFT_species$notes, &quot;ForestGEO&quot;)) %&gt;% nrow() == nForestGEO ## [1] TRUE PFT_species$notes &lt;- NULL 17.3 The point of all this I’m running four tests: I’ll refer to the species name in the data set as “submitted name” and the name returned throught the TNRS (that is specifically classified as an accepted name) as “accepted name.” Does the submitted name have an exact match in the database (ie return a species entry id)? If yes, submit_bety = TRUE. If submit_bety = TRUE, is the resulting species id in the PFT? If yes, submit_PFT = TRUE Then feed the submitted name through the TNRS and (hopefully) recieve an accepted name: Does the accepted name have an exact match in the database (ie return a species entry id)? If yes, accept_bety = TRUE. If accept_bety = TRUE, is the resulting species id in the PFT? If yes, accept_PFT = TRUE From this we can come up with the following cases: For a list of 131 species from trait data that needs to be imported in to BETY (from various sources), I determined the case for each species in a separate script. The result of this analysis are in the file /fs/data3/ecowdery/ED.Hydro/parameters/constraint_calculations/constraint_data/species_out.csv. species_out = read.csv(file = &quot;/fs/data3/ecowdery/ED.Hydro/parameters/constraint_calculations/constraint_data/species_out.csv&quot;, stringsAsFactors = FALSE) # Special case for which the TNRS did not work, I&#39;ll get to this later species_special &lt;- species_out %&gt;% filter(is.na(accept_name) | accept_name == &quot;&quot; | accept_name == &quot; &quot;) # Entries for which the TNRS did work species_case &lt;- species_out %&gt;% filter(!is.na(accept_name)) # dim(species_case) # Here I color the entries by &quot;score&quot; which is just how &quot;close&quot; the match is # So the score would go down for a spelling error for example ggplot(data = species_case) + geom_bar(aes(x = as.factor(case), fill = as.factor(score))) Luckily, case 6, the once in which the submitted name and accepted name agree and are in BETY and in the tropical PFT is the predominant case. However, there are a lot of other cases that need sorting through. This is where I need help. 17.4 Cases 17.4.1 Neither in bety 17.4.1.1 Case 1 case01 &lt;- !submit_bety &amp; !accept_bety My opinion: - Add the accepted name to the databse and to the PFT. - Enter the X.1 X submit_name submit_bety_id submit_in_PFT accept_name accept_bety_id accept_in_PFT sourceid score authority uri case ## [1] NA ## [1] X.1 X submit_name submit_bety_id ## [5] submit_in_PFT accept_name accept_bety_id accept_in_PFT ## [9] sourceid score authority uri ## [13] case ## &lt;0 rows&gt; (or 0-length row.names) 17.4.2 Submit not in bety, accept in bety 17.4.2.1 Case 2 case02 &lt;- !submit_bety &amp; accept_bety &amp; accept_PFT X.1 X submit_name submit_bety_id submit_in_PFT accept_name accept_bety_id accept_in_PFT sourceid score authority uri case 17.4.2.2 Case 3 case03 &lt;- !submit_bety &amp; accept_bety &amp; !accept_PFT X.1 X submit_name submit_bety_id submit_in_PFT accept_name accept_bety_id accept_in_PFT sourceid score authority uri case 17.4.3 Submit in bety, accept not in bety 17.4.3.1 Case 4 case04 &lt;- submit_bety &amp; submit_PFT &amp; !accept_bety X.1 X submit_name submit_bety_id submit_in_PFT accept_name accept_bety_id accept_in_PFT sourceid score authority uri case 17.4.3.2 Case 5 case05 &lt;- submit_bety &amp; !submit_PFT &amp; !accept_bety X.1 X submit_name submit_bety_id submit_in_PFT accept_name accept_bety_id accept_in_PFT sourceid score authority uri case 17.4.4 Both in bety and they equal each other 17.4.4.1 case06 &lt;- submit_bety &amp; accept_bety &amp; submit_accept &amp; accept_PFT 17.4.4.2 case07 &lt;- submit_bety &amp; accept_bety &amp; submit_accept &amp; !accept_PFT 17.4.5 Both in BETY and they don’t equal one another 17.4.5.1 case08 &lt;- submit_bety &amp; accept_bety &amp; !submit_accept &amp; submit_PFT &amp; accept_PFT 17.4.5.2 case09 &lt;- submit_bety &amp; accept_bety &amp; !submit_accept &amp; submit_PFT &amp; !accept_PFT 17.4.5.3 case10 &lt;- submit_bety &amp; accept_bety &amp; !submit_accept &amp; !submit_PFT &amp; accept_PFT 17.4.5.4 case11 &lt;- submit_bety &amp; accept_bety &amp; !submit_accept &amp; !submit_PFT &amp; !accept_PFT "]
]
