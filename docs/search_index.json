[
["index.html", "Calculating ED Hydro Parameter Priors Documentation", " Calculating ED Hydro Parameter Priors Betsy Cowdery 2019-09-27 Documentation So far this covers how I calculated all the priors. It may ultimately show how the priors compare to the observed data (and the results of a meta analysis given the PFTs we’re interested in.) 0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1 "],
["introduction.html", "Introduction Tropical forests and water stress Models predicting response to water stress Question This study", " Introduction Tropical forests and water stress Tropical forests are important to productivity. CITE Under water stress, this productivity has the potential to change. CITE Water stress is predicted to increas in both intensity and frequency. Climate change projections include predictions of increased variability in global climate conditions. This could result in increased frequency of extreme events such as early or late heat waves, droughts and floods (IPCC). Extreme heat events are not entirely independent from droughts, and it is possible that the increasing occurrence of the two could create a positive feedback loop, ultimately leading to even more extreme conditions and event durations (Reyer et al. 2013). To accurately predict future tropical forest productivity, we must be able to predict responses to water stress. Models predicting response to water stress Ecosystem models, at their core, are a series of hypotheses and assumptions about individual ecological processes and their interactions. These processes are the primary components of models, and the sum of their parts produces ecosystem level responses such as net primary productivity. Our understanding of the ecophysiological mechanisms that govern species responses to water stress are limited. Plants face a fundamental tradeoff between obtaining carbon and losing water, neither of which they can survive long without (Bonan 2015). Stomata take on the role of balancing the flux of CO2 and water between leaves and the atmosphere by changing stomatal conductance (\\(g_s\\)), the rate of assimilation and transpiration through stomata. Understanding why and how \\(g_s\\) changes, especially under stress, is crucial to successfully predicting plant productivity under climate change. Much work has been done to understand stomatal behavior, however, despite the existence of numerous studies showing correlations between stomatal conductance and environmental factors such as light availability, temperature, atmospheric concentration of CO2, vapor pressure deficit (VPD) and soil water availability, there is still much debate over which biological mechanisms drive stomatal conductance. The competing theories as to which mechanisms drive stomatal conductance under drought conditions, have be analogized to a “supply” and “demand” problem by (Novick et al. 2016). The “supply” argument is supported by cohesion-tension theory: water cannot be supplied to the plant because water uptake is limited by decreasing soil water potential (Williams et al. 1996). The “demand” argument is supported by stomatal optimization theory: plants want to maximize carbon uptake for a given water loss (Ball et al. 1987, Medlyn et al. 2011). One focuses on plant hydraulics and one on carbon assimilation but both water and CO2 availability are predicted to change with climate change and thus models need to react properly to both. There is general agreement that there needs to be a linking between soil moisture and photosynthesis-driven stomatal conductance (Choat et al. 2018, Medlyn et al. 2015, Rogers et al. 2017), but as of yet, the work to combines the theory is fairly new (Anderegg et al. 2017). ### Empirical vs mechanistic approach to modeling {-} It also happens that the competing “supply” and “demand” models differ in fundamental and interesting mathematical ways. The “demand” models based on optimizing carbon uptake as a function of atmospheric demand for water vapor are inherently empirical. Despite the progress that has been made toward finding biological meaning for parameters in the original Ball-Berry-Leuning stomatal conductance model in (Medlyn et al. 2011), there still exist parameters that have no grounding in reality. As a result, the physical mechanisms behind the seemingly inverse relationship between gs and VPD are still debated (CITE). On the other hand, the “supply” models based on maintaining water potentials throughout the plant to prevent cavitation, are mechanistic models based on cohesion-theory which in turn is built from physical understanding of intermolecular attraction and the flow of water against gravity (CITE). While various models differ in their choices of parameters, in general, parameters are physical properties of plants that can be measured. New mechanistic hydauics models have downsides: complexity! Mo’ parameters, mo’ problems! In most cases it in impossible to know the exact value of a model parameter and thus simply increasing the number of parameters in a model increases the amount of total parametric uncertainty that should be considered when calculating model predictive uncertainty. Not only does the model include more parameters, these parameters are hydraulic plant traits that are difficult (and in some cases theoretically impossible) to mesure in the field. This means that estimates of the paramter values contain exceptionally high amounts of uncertainty that have the potential to propogate through the model and contribute a great deal to model predictive uncertianty. Additioanlly, the sensitivity of the model to the hydraulic parameters may not be the same under all conditions. It may be the case that the model is much more sensitive to hydraulic parameters under water stress conditions. And thus predictive uncertainty from the mechanistic hydraulic model could increase unceder water stress, which would be exactly what we don’t want, given that we are expecting to see increases in those climactic condiitons. Uncertainties in stomatal responses are major drivers of ecosystem model uncertainty in predicted production (De Kauwe et al. 2013). Furthermore, the choices between stomatal conductance models has been highlighted as a key step required for advancing ecosystem modeling (Medlyn et al. 2015, Unable to find information for 4913547). Question The question then stands: even if mechanistic models have the potential to perform better under benchmarking tests and obviously represent a more sophisticated understanding of the processes underlying plant reponse to water stress, does this improvement outweight the potential increases in predictive uncertainty that come with increased model complexity? In other words: what good is a more sophisticated solution if we have no confidence in it? Furthermore, given the current hydraulic trait data that has been collected, can we sufficiently constrain parametric uncertainty enough to curtail excessive predictive uncertainty? If this is not currently possible, does this seem like an achievable future goal using uncertainty and varaiance decomposition analysis to guide us towards the appropriate data collection strategy? This study We aim to do a full uncertainty analysis of new hydraulic models. Full meta analysis of hydraulic traits Compare model performace under dry years as well as wet years.And maybe also soil moisture? my_tbl &lt;- tibble::tribble( ~HYDRO_WET, ~HYRO_DRY, ~ORIG_WET, ~ORIG_DRY, ~SOIL_MOIST, 0000000000, 1002716134, 0000000000, 0000000000, 2, 0000000000, 0000000000, 0000000000, 0000000000, 1.2 ) require(knitr) ## Loading required package: knitr kable(my_tbl, digits = 3, row.names = FALSE, align = &quot;l&quot;, caption = NULL) HYDRO_WET HYRO_DRY ORIG_WET ORIG_DRY SOIL_MOIST 0 1002716134 0 0 2.0 0 0 0 0 1.2 0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2 "],
["methods-and-materials.html", "Methods and Materials Ecosystem Demography Model (Version 2) ED2 Parameter Description Site and Prescrition of Initial Vegetation Conditions BCI 2012 survey data Prescription of Atmospheric Conditions Attributing Uncertainty to Ecological Processes Simulation protocols and data analysis", " Methods and Materials Ecosystem Demography Model (Version 2) Mechanisitc Hyraulics ED2 Parameter Description Site and Prescrition of Initial Vegetation Conditions BCI 2012 survey data Prescription of Atmospheric Conditions BCI 2012 flux tower data Simulating Drought Attributing Uncertainty to Ecological Processes Calculating Parameter Uncertainty Calculating Parameter Sensitivity and Contribution to Model Uncertainty Simulation protocols and data analysis PEcAn Meta Analysis Ensemble Runs Sensitivity Analysis and Variance Decomposition Benchmarking "],
["results.html", "Results", " Results "],
["discussion.html", "Discussion", " Discussion Good news is that it looks like it’s worth it. "],
["setup.html", "Setup 0.1 PFT: ED_Tropical_Hydro", " Setup ## Warning: Unknown columns: `BETY_prior_id` ## [1] &quot;leaf_psi_tlp&quot; &quot;wood_psi_tlp&quot; &quot;rwc_tlp_wood&quot; &quot;leaf_density&quot; ## [5] &quot;leaf_psi_min&quot; &quot;leaf_water_cap&quot; &quot;wood_Kexp&quot; &quot;wood_psi_min&quot; ## [9] &quot;wood_water_cap&quot; ED_name Christoffersen_name BETY_variable_id ED_units Christoffersen_units theor.min low.025 low.25 mean upp.75 upp.975 theor.max avuln_node NA NA MPa * 100 1e-01 1.00 10.0 NA 100 200.00 NA leaf_elastic_mod epsil_node 1000000294 MPa MPa 1e+00 5.00 NA 20.00 NA 50.00 NA wood_elastic_mod epsil_node NA MPa MPa 1e+00 5.00 NA 20.00 NA 50.00 NA wood_Kmax kmax_node 1000000290 kg H2O / m / s kg m-1 s-1 MPa-1 1e-02 0.10 0.5 NA 5 10.00 NA wood_psi50 p50_node 1000000289 m MPa 1e-01 0.50 1.0 NA 4 6.00 NA leaf_psi_osmotic pinot_node 1000000295 m MPa 1e-01 0.50 NA 2.00 NA 4.00 NA wood_psi_osmotic pinot_node 1000000298 m MPa 1e-01 0.50 NA 2.00 NA 4.00 NA leaf_psi_tlp pitlp_node 1000000284 m MPa 5e-01 NA NA NA NA NA 6.00 wood_psi_tlp pitlp_node 1000000301 m MPa 1e-01 NA NA NA NA NA NA rwc_tlp_wood rwctlp_node 1000000296 unitless unitless NA NA NA NA NA NA NA leaf_water_sat thetas_node 1000000285 kg H2O/kg biomass kg kg-1 1e-02 0.40 NA 0.65 NA 0.88 0.99 wood_water_sat thetas_node 1000000286 kg H2O/kg biomass kg kg-1 5e-02 0.35 NA NA NA 0.80 0.90 leaf_density NA NA kg/m3 NA 1e-07 NA NA NA NA NA 2000.00 leaf_psi_min NA 1000000299 m NA 1e-01 NA NA NA NA NA 700.00 leaf_water_cap NA 1000000287 kg H2O/kg biomass/m NA 1e-07 NA NA NA NA NA NA wood_Kexp NA 1000000305 unitless NA NA NA NA NA NA NA NA wood_psi_min NA 1000000300 m NA 1e-01 NA NA NA NA NA NA wood_water_cap NA 1000000288 kg H2O/kg biomass/m NA 1e-07 NA NA NA NA NA NA 0.1 PFT: ED_Tropical_Hydro ED id: 1000000131 pftid &lt;- 1000000131 priorid &lt;- tbl(bety, &quot;pfts_priors&quot;) %&gt;% filter(pft_id == pftid) %&gt;% pull(prior_id) ## Warning: `new_overscope()` is deprecated as of rlang 0.2.0. ## Please use `new_data_mask()` instead. ## This warning is displayed once per session. ## Warning: `overscope_eval_next()` is deprecated as of rlang 0.2.0. ## Please use `eval_tidy()` with a data mask instead. ## This warning is displayed once per session. ## Warning: `overscope_clean()` is deprecated as of rlang 0.2.0. ## This warning is displayed once per session. pfts_priors &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id %in% priorid) %&gt;% select(one_of(&quot;id&quot;, &quot;variable_id&quot;, &quot;distn&quot;, &quot;parama&quot;, &quot;paramb&quot;)) %&gt;% left_join(tbl(bety, &quot;variables&quot;) %&gt;% select(&quot;id&quot;, &quot;name&quot;), by = c(&quot;variable_id&quot; = &quot;id&quot;)) %&gt;% collect() %&gt;% rename(&quot;var_name&quot; = &quot;name&quot;) ## Warning: `chr_along()` is deprecated as of rlang 0.2.0. ## This warning is displayed once per session. kable(pfts_priors) id variable_id distn parama paramb var_name 1000000099 2000000005 unif 0.000000000 0.5000000000 orient_factor 1000000422 1000000055 unif 0.100000000 1.1000000000 wood_density 1000000384 1000000284 lnorm 5.420000000 0.5300000000 leaf_psi_tlp 1000000446 1000000307 norm 0.470000000 0.0500000000 b2Rd 1000000429 1000000292 unif 0.000000000 100.0000000000 SRA 1000000416 1000000301 lnorm 5.430000000 0.5500000000 wood_psi_tlp 1000000425 1000000305 weibull 0.800000000 4.0700000000 wood_Kexp 1000000430 1000000290 beta 0.720000000 21.9500000000 wood_Kmax 1000000420 1000000289 lnorm 5.280000000 0.8500000000 wood_psi50 1000000405 1000000287 lnorm -0.290000000 0.7600000000 leaf_water_cap 1000000448 1000000310 norm 1.847288597 0.6607372343 b2Bl_large 1000000447 1000000309 lnorm -4.620000000 1.0800000000 b1Bl_large 1000000445 1000000306 gamma 174.750000000 368.4900000000 b1Rd 1000000457 1000000313 unif 0.000100000 0.1000000000 root_beta 1000000417 1000000288 lnorm 0.380000000 0.9800000000 wood_water_cap 2000000060 26 weibull 2.000000000 7.0000000000 stomatal_slope 1000000460 1000000314 unif 1.000000000 5.0000000000 stoma_psi_c 57 27 beta 4.060000000 7.2000000000 growth_resp_factor 35 41 weibull 1.550000000 0.8620000000 root_turnover_rate 140 273 beta 1.000000000 1.0000000000 agf_bs 142 15 weibull 2.100000000 12.1000000000 SLA 240 500 unif 0.010000000 0.2000000000 leaf_reflect_vis 241 501 unif 0.010000000 0.3000000000 leaf_reflect_nir 242 502 unif 0.010000000 0.2000000000 leaf_trans_vis 243 503 unif 0.010000000 0.6000000000 leaf_trans_nir 131 40 unif 0.040000000 1.0000000000 leaf_turnover_rate 137 21 lnorm -0.250000000 1.0000000000 fineroot2leaf 197 7 gamma 1.500000000 0.4000000000 leaf_respiration_rate_m2 216 463 unif 1.400000000 2.6000000000 veg_respiration_Q10 227 39 gamma 2.000000000 22.0000000000 quantum_efficiency 228 4 weibull 1.700000000 80.0000000000 Vcmax "],
["starting-parameters.html", "Starting Parameters [wdns]: Liquid water density [grav]: Gravity [MPa2m]: Conversion from MPa to m [wood_density]: Wood density [SLA]: Specific Leaf Area (SLA)", " Starting Parameters [wdns]: Liquid water density ED variable name : wdns ED variable units: kg/m3 wdns &lt;- 1.000e3 # Liquid water density [kg/m3] [grav]: Gravity ED variable name : grav ED variable units: m/s2 grav &lt;- 9.80665 # Gravity acceleration [m/s2] [MPa2m]: Conversion from MPa to m ED variable name : MPa2m MPa2m &lt;- wdns / grav [wood_density]: Wood density ED variable name : rho ED units: g cm-3 Note! Leaf density is calculated in kg cm-3 because that makes perfect sense … ED variable id: 1000000055 FATES varaiable name: WD In the database, wood_density is unitless. So I’m assuming it can be directly mapped to our wood_density as such: \\[\\frac{WD (gcm^{-2})}{\\rho_w(gcm^{-2})} * \\rho_w(gcm^{-2}) = \\frac{WD (gcm^{-2})}{1(gcm^{-2})} * 1(gcm^{-2})\\] There are multiple priors available for wood density so we are explicitly choosing prior 1000000281 (this was chosen by someone else when the PFT was created.) wood_density_fit &lt;- pfts_priors %&gt;% filter(var_name == &quot;wood_density&quot;) %&gt;% select(one_of(&quot;distn&quot;, &quot;parama&quot;, &quot;paramb&quot;)) wood_density_prior &lt;- rdistn(wood_density_fit) wood_density_default &lt;- get_ED_default(PFT3_defaults_history, &quot;rho&quot;) prior_plot(prior = wood_density_prior, plot_default = wood_density_default, title = sprintf(&quot;(wood_density): %s&quot;, wood_density_fit$distn), type = &quot;prior&quot;) [SLA]: Specific Leaf Area (SLA) And subsequently \\(LMA = (1/SLA)\\) ED variable name : SLA ED variable id: 15 There are multiple priors available for SLA so we are explicitly choosing prior 142 (this was chosen by someone else when the PFT was created.) SLA_fit &lt;- pfts_priors %&gt;% filter(var_name == &quot;SLA&quot;) %&gt;% select(one_of(&quot;distn&quot;, &quot;parama&quot;, &quot;paramb&quot;)) SLA_prior &lt;- rdistn(SLA_fit) SLA_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;SLA&quot;) prior_plot(prior = SLA_prior, plot_default = SLA_default, title = sprintf(&quot;(SLA): %s&quot;, SLA_fit$distn), type = &quot;prior&quot;) "],
["key-leaf-traits.html", "Key Leaf Traits [leaf_psi_osmotic]: Leaf osmotic water potential at saturation [leaf_elastic_mod]: Leaf bulk elastic modulus [leaf_density]: Density of leaf tissue [leaf_water_sat]: Leaf water content at saturation [leaf_psi_tlp]: Leaf water potential at turgor loss point [leaf_water_cap]: Leaf hydaulic capacitance. [leaf_psi_min]: Leaf minimum water potential", " Key Leaf Traits [leaf_psi_osmotic]: Leaf osmotic water potential at saturation ED ED variable name : leaf_psi_osmotic ED variable units: m BETY NOTE!! The units are NEGATIVE in the database so we can calculate a distribution that is entirely negative. Variable id: 1000000295 Prior id: 1000000388 Calculation Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: pinot_node (leaf) FATES variable units: MPa Conversion MPa to m Code i &lt;- which(priors$ED_name == &quot;leaf_psi_osmotic&quot;) prior_in &lt;- priors[i, stats] * MPa2m myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) myfit$score$dist[which.min(myfit$score$RMSE)] ## [1] &quot;weibull&quot; variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_psi_osmotic_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000388 already exists. Parameters look the same. Old: weibull(2.4100, 237.4600) New: weibull(2.4100, 237.4600)&quot; leaf_psi_osmotic_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_psi_osmotic_prior_id) %&gt;% collect() leaf_psi_osmotic_prior &lt;- -rdistn(leaf_psi_osmotic_fit) # NOTE: Need to convert to m from -m leaf_psi_osmotic_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_psi_osmotic&quot;) prior_plot(prior = leaf_psi_osmotic_prior, q = c(0,1), plot_default = leaf_psi_osmotic_default, title = sprintf(&quot; (leaf_psi_osmotic): %s&quot;, leaf_psi_osmotic_fit$distn), type = &quot;elic&quot;) [leaf_elastic_mod]: Leaf bulk elastic modulus ED ED variable name : leaf_elastic_mod ED variable units: MPa Note! This is the only case in which MPa is used instead of m! BETY Variable id: 1000000294 Prior id: 1000000387 Calculation Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: epsil_node (leaf) FATES variable units: MPa Conversion None! Code i &lt;- which(priors$ED_name == &quot;leaf_elastic_mod&quot;) prior_in &lt;- priors[i,] myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_elastic_mod_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000387 already exists. Parameters look the same. Old: gamma(3.4400, 0.1600) New: gamma(3.4400, 0.1600)&quot; leaf_elastic_mod_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_elastic_mod_id) %&gt;% collect() leaf_elastic_mod_prior &lt;- rdistn(leaf_elastic_mod_fit) leaf_elastic_mod_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_elastic_mod&quot;) prior_plot(prior = leaf_elastic_mod_prior, q = c(0,.995), plot_default = leaf_elastic_mod_default, title = sprintf(&quot;Leaf bulk elastic modulus (leaf_elastic_mod): %s&quot;, leaf_elastic_mod_fit$distn), type = &quot;elic&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). [leaf_density]: Density of leaf tissue ED ED variable name : leaf_density ED variable units: kg m-3 BETY Variable id: 1000000304 Prior id: 1000000396 Calculation Expert elicitation No expert elicitation provided by Brad Christoffersen. I will use the equation in ED to calcualte the prior and add min and max values to make sure the distribution does not predict values that are not biologically possible. Values added by Betsy and Felicien: # Leaf_density priors[which(priors$ED_name == &quot;leaf_density&quot;), c(&quot;theor.min&quot;, &quot;theor.max&quot;)] &lt;- c(1e-7, 2000) Copies directly from the ED code: max(0.1 * 1.e3, (leaf_elastic_mod(ipft) - 2.03) / 25.4 * 1.e3) But there is a key step here that we need to think about, which is that in the ED code, 0.1 * 1.e3 is the smallest possible value. I encorporate that information by setting 0.1 * 1.e3 as the min theoretical value when fitting the distribution (but remove the max from the equation when calculating the leaf_density_sample.) leaf_density_sample &lt;- (leaf_elastic_mod_prior - 2.03) / 25.4 * 1.e3 Conversion None Code leaf_density_sample &lt;- (leaf_elastic_mod_prior - 2.03) / 25.4 * 1.e3 # Add in the max an min from the priors table i &lt;- which(priors$ED_name == &quot;leaf_density&quot;) prior_in &lt;- priors[i,] # Note here I don&#39;t need to do any units conversion prior_in &lt;- prior_add_samp_data(prior_in, samp = leaf_density_sample) prior_in[,stats] ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.0000001 118. 429. 682. 1011. 1865. 2000 myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == &quot;leaf_density&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_density_default &lt;- (get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_elastic_mod&quot;) - 2.03) / 25.4 * 1.e3 leaf_density_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000396 already exists. Parameters look different. Old: weibull(1.8200, 844.6000) New: weibull(1.8200, 842.3300)&quot; leaf_density_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_density_id) %&gt;% collect() leaf_density_prior &lt;- rdistn(leaf_density_fit) prior_plot(prior = leaf_density_prior, q = c(0,.995), plot_default = leaf_density_default, title = sprintf(&quot;Leaf density (leaf_density): %s&quot;, leaf_density_fit$distn), type = &quot;mixed&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). [leaf_water_sat]: Leaf water content at saturation ED ED variable name : leaf_water_sat ED variable units: kg H2O/kg biomass BETY Variable id: 1000000285 Prior id: 1000000414 Calculation There are a couple ways to approach this: Either build a prior completely from other priors (ie using the equations from ED and a prior for LMA and leaf_density) or try to do a combination where we use the priovided expert elicitation and the prior distribution for leaf_density. I am going to try doing both just to see how they differ. Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: thetas_node (leaf) FATES variable units: kg kg-1 Conversion The equations between the two are identical except that to get from FATES to ED, must multiply by (water density)/(leaf density) Code Initial testing code leaf_density_prior_1 &lt;- leaf_density_prior leaf_density_prior_2 &lt;- rlnorm(100000, 6.51, .59) # Also trying with lnorm, this is left over from a previous question but I&#39;m including it for now so that the code runs # Following the equation in ED SLA_density &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;SLA&quot;) default_LMA &lt;- 1e3 * 2 / SLA_density # 1.e3 * C2B / SLA(ipft) leaf_water_sat_density &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_water_sat&quot;) leaf_water_sat_default_calc &lt;- (-2.32e4 / default_LMA + 782.) * (1. / (-0.21 * log(1.e4 / default_LMA) + 1.43) - 1.) / leaf_density_default # c(leaf_water_sat_density, leaf_water_sat_default_calc) LMA_prior &lt;- 1e3 * 2 / SLA_prior # Should be analogous to Christoffersen because I&#39;m dividing by wdns instead of leaf_density leaf_water_sat_samp_1_1 &lt;- (-2.32e4 / LMA_prior + 782.) * (1. / (-0.21 * log(1.e4 / LMA_prior) + 1.43) - 1.) / leaf_density_prior_1 leaf_water_sat_samp_1_2 &lt;- (-2.32e4 / LMA_prior + 782.) * (1. / (-0.21 * log(1.e4 / LMA_prior) + 1.43) - 1.) / leaf_density_prior_2 prior_in_1_1 &lt;- data.frame(low.025 = quantile(leaf_water_sat_samp_1_1, c(.025), na.rm = TRUE), low.25 = quantile(leaf_water_sat_samp_1_1, c(.25), na.rm = TRUE), mean = quantile(leaf_water_sat_samp_1_1, c(.5), na.rm = TRUE), upp.75 = quantile(leaf_water_sat_samp_1_1, c(.75), na.rm = TRUE), upp.975 = quantile(leaf_water_sat_samp_1_1, c(.975), na.rm = TRUE)) myfit_1_1 &lt;- prior_get_fit(prior_in_1_1, accepted_dists, plot = FALSE) ## Warning: Unknown columns: `theor.min`, `theor.max` myfit_1_1$score$dist[which.min(myfit_1_1$score$RMSE)] ## [1] &quot;exp&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_1_1 &lt;- rexp(1000, myfit_1_1$dists$exp[1]) prior_in_1_2 &lt;- data.frame(low.025 = quantile(leaf_water_sat_samp_1_2, c(.025), na.rm = TRUE), low.25 = quantile(leaf_water_sat_samp_1_2, c(.25), na.rm = TRUE), mean = quantile(leaf_water_sat_samp_1_2, c(.5), na.rm = TRUE), upp.75 = quantile(leaf_water_sat_samp_1_2, c(.75), na.rm = TRUE), upp.975 = quantile(leaf_water_sat_samp_1_2, c(.975), na.rm = TRUE)) myfit_1_2 &lt;- prior_get_fit(prior_in_1_2, accepted_dists, plot = FALSE) ## Warning: Unknown columns: `theor.min`, `theor.max` myfit_1_2$score$dist[which.min(myfit_1_2$score$RMSE)] ## [1] &quot;lnorm&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_1_2 &lt;- rlnorm(1000, myfit_1_2$dists$lnorm[1], myfit_1_2$dists$lnorm[2]) # Using the data i &lt;- which(priors$ED_name == &quot;leaf_water_sat&quot;) myfit_2 &lt;- prior_get_fit(priors[i,], accepted_dists, plot = FALSE) myfit_2$score$dist[which.min(myfit_2$score$RMSE)] ## [1] &quot;norm&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_2 &lt;- rnorm(1000, myfit_2$dists$norm[1], myfit_2$dists$norm[2]) calc_2_1 &lt;- leaf_water_sat_prior_2 * (wdns/(leaf_density_prior_1)) prior_in_2_1 &lt;- data.frame(low.025 = quantile(calc_2_1, c(.025), na.rm = TRUE), low.25 = quantile(calc_2_1, c(.25), na.rm = TRUE), mean = quantile(calc_2_1, c(.5), na.rm = TRUE), upp.75 = quantile(calc_2_1, c(.75), na.rm = TRUE), upp.975 = quantile(calc_2_1, c(.975), na.rm = TRUE)) myfit_2_1 &lt;- prior_get_fit(prior_in_2_1, accepted_dists, plot = FALSE) ## Warning: Unknown columns: `theor.min`, `theor.max` myfit_2_1$score$dist[which.min(myfit_2_1$score$RMSE)] ## [1] &quot;lnorm&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_2_1 &lt;- rlnorm(1000, myfit_2_1$dists$lnorm[1], myfit_2_1$dists$lnorm[2]) calc_2_2 &lt;- leaf_water_sat_prior_2 * (wdns/(leaf_density_prior_2)) prior_in_2_2 &lt;- data.frame(low.025 = quantile(calc_2_2, c(.025), na.rm = TRUE), low.25 = quantile(calc_2_2, c(.25), na.rm = TRUE), mean = quantile(calc_2_2, c(.5), na.rm = TRUE), upp.75 = quantile(calc_2_2, c(.75), na.rm = TRUE), upp.975 = quantile(calc_2_2, c(.975), na.rm = TRUE)) myfit_2_2 &lt;- prior_get_fit(prior_in_2_2, accepted_dists, plot = FALSE) ## Warning: Unknown columns: `theor.min`, `theor.max` myfit_2_2$score$dist[which.min(myfit_2_2$score$RMSE)] ## [1] &quot;lnorm&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_2_2 &lt;- rlnorm(1000, myfit_2_2$dists$lnorm[1], myfit_2_2$dists$lnorm[2]) df &lt;- data.frame(leaf_water_sat_prior_1_1, leaf_water_sat_prior_1_2, leaf_water_sat_prior_2_1, leaf_water_sat_prior_2_2) df2 &lt;- df %&gt;% gather(key = &quot;prior&quot;) %&gt;% mutate(leaf_dens_dist = case_when( prior == &quot;leaf_water_sat_prior_1_1&quot; ~ &quot;Weibull&quot;, prior == &quot;leaf_water_sat_prior_1_2&quot; ~ &quot;Log Normal&quot;, prior == &quot;leaf_water_sat_prior_2_1&quot; ~ &quot;Weibull&quot;, prior == &quot;leaf_water_sat_prior_2_2&quot; ~ &quot;Log Normal&quot; )) %&gt;% mutate(prior_or_data = case_when( prior == &quot;leaf_water_sat_prior_1_1&quot; ~ &quot;LMA_prior&quot;, prior == &quot;leaf_water_sat_prior_1_2&quot; ~ &quot;LMA_prior&quot;, prior == &quot;leaf_water_sat_prior_2_1&quot; ~ &quot;leaf_water_sat_exp_elicit&quot;, prior == &quot;leaf_water_sat_prior_2_2&quot; ~ &quot;leaf_water_sat_exp_elicit&quot; )) ggplot(data = df2) + geom_density(aes(x = value, color = prior_or_data, linetype = leaf_dens_dist)) + geom_vline(aes(xintercept = leaf_water_sat_density)) + geom_point(aes(x = .03, y = 0)) + geom_point(aes(x = 1.5, y = 0)) + geom_point(aes(x = 2, y = 0)) + xlim(-.25, 4) ## Warning: Removed 35 rows containing non-finite values (stat_density). From this point, we can see that just using the equations in the ED code makes the distributions predict low values which is could be a problem given that these values should not be zero and that the distribution underpredicts both in relation to the default value and the values that Felicien gave me. Thus I would create the prior using the expert elicitation values provided by Brad. I am also comfortable with chooseing the best fit distribution for leaf_density which is the weibull distribution instead of trying to come up with a reason why we should make leaf density log normal instead. The log normal was the best if I didn’t include the lower bound - that’s why I wanted to look at it… Actual code i &lt;- which(priors$ED_name == &quot;leaf_water_sat&quot;) myfit_0 &lt;- prior_get_fit(priors[i,], accepted_dists, plot = FALSE) myfit_0$score$dist[which.min(myfit_0$score$RMSE)] ## [1] &quot;norm&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_0 &lt;- rnorm(100000, myfit_0$dists$norm[1], myfit_0$dists$norm[2]) leaf_water_sat_sample &lt;- leaf_water_sat_prior_0 * (wdns/(leaf_density_prior)) # plot(density(leaf_water_sat_sample), main = &quot;leaf water sat sample without fitting&quot;) # In this case I&#39;m not using the function I built because here it wouldn&#39;t make sense. prior_in &lt;- data.frame(low.025 = quantile(leaf_water_sat_sample, c(.025), na.rm = TRUE), low.25 = quantile(leaf_water_sat_sample, c(.25), na.rm = TRUE), mean = quantile(leaf_water_sat_sample, c(.5), na.rm = TRUE), upp.75 = quantile(leaf_water_sat_sample, c(.75), na.rm = TRUE), upp.975 = quantile(leaf_water_sat_sample, c(.975), na.rm = TRUE)) myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) ## Warning: Unknown columns: `theor.min`, `theor.max` variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_water_sat_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000414 already exists. Parameters look the same. Old: lnorm(-0.0400, 0.6400) New: lnorm(-0.0400, 0.6400)&quot; leaf_water_sat_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_water_sat_prior_id) %&gt;% collect() leaf_water_sat_prior &lt;- rdistn(leaf_water_sat_fit) leaf_water_sat_density &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_water_sat&quot;) prior_plot(prior = leaf_water_sat_prior, q = c(0,.995), plot_default = leaf_water_sat_density, title = sprintf(&quot;Leaf water content at saturation (leaf_water_sat): %s&quot;, leaf_water_sat_fit$distn), type = &quot;mixed&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). [leaf_psi_tlp]: Leaf water potential at turgor loss point ED ED variable name : leaf_psi_tlp ED variable units: m BETY Variable id: 1000000284 Prior id: 1000000384 NOTE!! The units are NEGATIVE in the database so we can calculate a distribution that is entirely negative. Calculation Expert elicitation No expert elicitation provided by Brad Christoffersen. I will use the equation in ED to calcualte the prior and add min and max values to make sure the distribution does not predict values that are not biologically possible. Values added by Betsy and Felicien: # Leaf_psi_tlp priors[which(priors$ED_name == &quot;leaf_psi_tlp&quot;), c(&quot;theor.min&quot;, &quot;theor.max&quot;)] &lt;- c(-6, -0.5) Code directly from ED: leaf_elastic_mod(ipft) * (leaf_psi_osmotic(ipft) / MPa2m) / (leaf_elastic_mod(ipft) + leaf_psi_osmotic(ipft) / MPa2m) * MPa2m Thus, leaf_psi_tlp is calculated purely from other parameters: leaf_psi_osmotic and leaf_elastic_mod leaf_psi_tlp_samp &lt;- (leaf_psi_osmotic_prior * (leaf_elastic_mod_prior * MPa2m))/ (leaf_psi_osmotic_prior + (leaf_elastic_mod_prior * MPa2m)) Conversion Remember that leaf_elastic_mod is MPa, where everything else is m! Code leaf_psi_tlp_samp &lt;- (leaf_psi_osmotic_prior * (leaf_elastic_mod_prior * MPa2m))/ (leaf_psi_osmotic_prior + (leaf_elastic_mod_prior * MPa2m)) summary(leaf_psi_tlp_samp) ## Min. 1st Qu. Median Mean 3rd Qu. ## -133258.1097 -326.8549 -232.4573 -243.4833 -154.5820 ## Max. ## 816873.1646 # Add in the max an min from the priors table i &lt;- which(priors$ED_name == &quot;leaf_psi_tlp&quot;) prior_in &lt;- priors[i,stats] * MPa2m # Convert from MPa to m prior_in &lt;- prior_add_samp_data(prior_in, samp = -leaf_psi_tlp_samp) prior_in[,stats] ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 50.98581065 NA 154.5820419 232.4573147 326.8548902 NA ## theor.max ## 1 611.8297278 myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;leaf_psi_tlp&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_psi_tlp_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000384 already exists. Parameters look different. Old: lnorm(5.4200, 0.5300) New: lnorm(5.4300, 0.5300)&quot; leaf_psi_tlp_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_psi_tlp_prior_id) %&gt;% collect() leaf_psi_tlp_prior &lt;- -rdistn(leaf_psi_tlp_fit) # Remember to flip back over for psi leaf_psi_tlp_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_psi_tlp&quot;) # plot(density(leaf_psi_tlp_prior), main = &quot;leaf_psi_tlp prior&quot;) # abline(v = get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_psi_tlp&quot;), col = &quot;blue&quot;, lwd = 2) # abline(v = quantile(leaf_psi_osmotic_prior, c(.025, .975)), lty = 2) # legend(&quot;topleft&quot;,legend=c(&quot;Prior&quot;, &quot;95% CI&quot;, &quot;ED PFT 3 Default&quot;), col=c(&quot;black&quot;, &quot;black&quot;,&quot;blue&quot;), lwd = c(2,1,2), lty = c(1,2,1)) prior_plot(prior = leaf_psi_tlp_prior, q = c(.005,1), plot_default = leaf_psi_tlp_default, title = sprintf(&quot;(leaf_psi_tlp): %s&quot;, leaf_psi_tlp_fit$distn), type = &quot;mixed&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). [leaf_water_cap]: Leaf hydaulic capacitance. ED ED variable name : leaf_water_cap ED variable units: kg H2O/kg biomass/m BETY Variable id: 1000000287 Prior id: 1000000405 NOTE: units in BETY are g H2O / kg biomass / m! This is because we needed to multiply by 1000 to get large enough values to fit the distribution. Calculation Expert elicitation No expert elicitation provided by Brad Christoffersen. I will use the equation in ED to calcualte the prior and add min and max values to make sure the distribution does not predict values that are not biologically possible. Values added by Betsy and Felicien: # Leaf_water_cap priors[which(priors$ED_name == &quot;leaf_water_cap&quot;), c(&quot;theor.min&quot;, &quot;theor.max&quot;)] &lt;- c(1e-7, NA) Equation copied directly from ED: (1. - leaf_psi_osmotic(ipft) / (4. * leaf_psi_tlp(ipft))) * leaf_water_sat(ipft) / (4. * abs(leaf_psi_tlp(ipft))) Conversion Don’t forget about the switch from kg to g! Code leaf_water_cap_samp &lt;- 1000 * (1 - leaf_psi_osmotic_prior / (4 * leaf_psi_tlp_prior)) * (leaf_water_sat_prior / (4 * abs(leaf_psi_tlp_prior))) # * (wdns/leaf_density_prior) leaf_water_cap_samp &lt;- leaf_water_cap_samp[0 &lt; leaf_water_cap_samp] default_leaf_water_cap &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_water_cap&quot;) plot(density(leaf_water_cap_samp)) abline(v = default_leaf_water_cap) # Add in the max an min from the priors table i &lt;- which(priors$ED_name == &quot;leaf_water_cap&quot;) prior_in &lt;- priors[i,stats] prior_in[,&quot;theor.min&quot;] &lt;- NA # prior_in[,&quot;theor.max&quot;] &lt;- max(.35 * (1/MPa2m) * (wdns/leaf_density_prior) ) prior_in &lt;- prior_add_samp_data(prior_in, samp = leaf_water_cap_samp) prior_in[,stats] ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;lgl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 NA 0.164 0.446 0.743 1.23 3.27 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;leaf_water_cap&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_water_cap_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000405 already exists. Parameters look different. Old: lnorm(-0.2900, 0.7600) New: lnorm(-0.3000, 0.7600)&quot; leaf_water_cap_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_water_cap_prior_id) %&gt;% collect() leaf_water_cap_prior &lt;- rdistn(leaf_water_cap_fit) * (1/1000) leaf_water_cap_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_water_cap&quot;) prior_plot(prior = leaf_water_cap_prior, q = c(0,.975), plot_default = leaf_water_cap_default, title = sprintf(&quot;(leaf_water_cap): %s&quot;, leaf_water_cap_fit$distn), type = &quot;mixed&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). [leaf_psi_min]: Leaf minimum water potential This is calculated from [leaf_rwc_min]: Leaf minimum relative water content or leaf residual fraction, which I have not added to BETY. ED ED variable name : leaf_psi_min ED variable units: m BETY Variable id: 1000000299 Prior id: 1000000392 NOTE!! The units are NEGATIVE in the database so we can calculate a distribution that is entirely negative. Calculation Expert elicitation No expert elicitation provided by Brad Christoffersen. I will use the equation in ED to calcualte the prior and add min and max values to make sure the distribution does not predict values that are not biologically possible. Values added by Betsy and Felicien: # Leaf_psi_min priors[which(priors$ED_name == &quot;leaf_psi_min&quot;), c(&quot;theor.min&quot;, &quot;theor.max&quot;)] &lt;- c(-700, -0.1) Code copied from ED: leaf_rwc_min = 0.01 * leaf_elastic_mod(ipft) + 0.17 leaf_psi_min = (leaf_rwc_min(ipft) - 1.) * leaf_water_sat(ipft) / leaf_water_cap(ipft) Conversion None Code leaf_rwc_min_samp = 0.01 * leaf_elastic_mod_prior + 0.17 leaf_psi_min_samp = (leaf_rwc_min_samp - 1.) * leaf_water_sat_prior / leaf_water_cap_prior # Add in the max an min from the priors table i &lt;- which(priors$ED_name == &quot;leaf_psi_min&quot;) prior_in &lt;- priors[i,stats] * MPa2m # Convert from MPa to m prior_in &lt;- prior_add_samp_data(prior_in, samp = -leaf_psi_min_samp) prior_in[,stats] ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 10.19716213 103.6635942 388.7338255 773.6216647 1530.227278 5643.437401 ## theor.max ## 1 71380.13491 myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;leaf_psi_min&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_psi_min_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000392 already exists. Parameters look different. Old: lnorm(6.6500, 1.0100) New: lnorm(6.6500, 1.0200)&quot; leaf_psi_min_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_psi_min_prior_id) %&gt;% collect() leaf_psi_min_prior &lt;- -rdistn(leaf_psi_min_fit) # Remember to flip psi default_leaf_psi_min &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_psi_min&quot;) prior_plot(prior = leaf_psi_min_prior, q = c(.025,1), plot_default = default_leaf_psi_min, title = sprintf(&quot;leaf_psi_min: %s&quot;, leaf_psi_min_fit$distn), type = &quot;mixed&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). "],
["key-wood-traits.html", "Key Wood Traits [wood_psi_osmotic]: Sapwood osmotic water potential at saturation [wood_elastic_mod]: Sapwood bulk elastic modulus [wood_water_sat]: Sapwood water content at saturation [wood_psi_tlp]: Sapwood water potential at turgor loss point [wood_water_cap]: Wood hydaulic capacitance [wood_psi_min]: Sapwood minimum relative water content or Sapwood residual fraction [wood_Kmax]: Maximum hydraulic conductivity of the stem [wood_psi50]: Water potential at which 50% of stem conductivity is lost [ax]: Slope of xylem vulnerability curve at P50 [wood_Kexp]: Exponent for the hydraulic vulnerability curve of stem conductivity", " Key Wood Traits [wood_psi_osmotic]: Sapwood osmotic water potential at saturation ED ED variable name : wood_psi_osmotic ED variable units: m BETY Variable id: 1000000298 Prior id: 1000000410 NOTE!! The units are NEGATIVE in the database so we can calculate a distribution that is entirely negative. Calculation Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: pinot_node (stem) FATES variable units: m Conversion MPa to m Code i &lt;- which(priors$ED_name == &quot;wood_psi_osmotic&quot;) prior_in &lt;- priors[i, stats] * MPa2m myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) myfit$score$dist[which.min(myfit$score$RMSE)] ## [1] &quot;weibull&quot; variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_psi_osmotic_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000410 already exists. Parameters look the same. Old: weibull(2.4100, 237.4600) New: weibull(2.4100, 237.4600)&quot; wood_psi_osmotic_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_psi_osmotic_prior_id) %&gt;% collect() wood_psi_osmotic_prior &lt;- -rdistn(wood_psi_osmotic_fit) wood_psi_osmotic_default &lt;- get_ED_default(PFT3_defaults_history, &quot;wood_psi_osmotic&quot;) prior_plot(prior = wood_psi_osmotic_prior, q = c(0,1), plot_default = wood_psi_osmotic_default, title = sprintf(&quot;Sapwood osmotic water potential at saturation (wood_psi_osmotic): %s&quot;, wood_psi_osmotic_fit$distn), type = &quot;elic&quot;) [wood_elastic_mod]: Sapwood bulk elastic modulus ED ED variable name : wood_elastic_mod ED variable units: MPa Note! This is the only case in which MPa is used instead of m! BETY Variable id: 1000000303 Prior id: 1000000394 Calculation Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: epsil_node (stem) FATES variable units: MPa Conversion None! Code i &lt;- which(priors$ED_name == &quot;wood_elastic_mod&quot;) prior_in &lt;- priors[i,] myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_elastic_mod_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000394 already exists. Parameters look the same. Old: gamma(3.4400, 0.1600) New: gamma(3.4400, 0.1600)&quot; wood_elastic_mod_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_elastic_mod_id) %&gt;% collect() wood_elastic_mod_prior &lt;- rdistn(wood_elastic_mod_fit) wood_elastic_mod_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_elastic_mod&quot;) prior_plot(prior = wood_elastic_mod_prior, q = c(0,1), plot_default = wood_elastic_mod_default, title = sprintf(&quot;wood bulk elastic modulus (wood_elastic_mod): %s&quot;, wood_elastic_mod_fit$distn), type = &quot;elic&quot;) [wood_water_sat]: Sapwood water content at saturation ED ED variable name: wood_water_sat ED variable units: kg H2O/kg biomass BETY Variable id: `` Prior id: `` Calculation Expert elicitation Expert elicitation provided by Brad Christoffersen FATES variable name: thetas_node (stem) FATES variable units: kg kg-1 Conversion multiply by the density of water over wood density Code i &lt;- which(priors$ED_name == &quot;wood_water_sat&quot;) myfit_0 &lt;- prior_get_fit(priors[i,], accepted_dists, plot = FALSE) myfit_0$score$dist[which.min(myfit_0$score$RMSE)] ## [1] &quot;norm&quot; # I&#39;m skipping steps here for the sake of time and sanity # Normal is the best fit wood_water_sat_prior_0 &lt;- rnorm(100000, myfit_0$dists$norm[1], myfit_0$dists$norm[2]) wood_water_sat_sample &lt;- wood_water_sat_prior_0 * (wdns/(wood_density_prior * 1e3)) # Note that here we have to multiply by 1e3 because of the units of wood density # In this case I&#39;m not using the function I built because here it wouldn&#39;t make sense. prior_in &lt;- data.frame(low.025 = quantile(wood_water_sat_sample, c(.025), na.rm = TRUE), low.25 = quantile(wood_water_sat_sample, c(.25), na.rm = TRUE), mean = quantile(wood_water_sat_sample, c(.5), na.rm = TRUE), upp.75 = quantile(wood_water_sat_sample, c(.75), na.rm = TRUE), upp.975 = quantile(wood_water_sat_sample, c(.975), na.rm = TRUE)) myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) ## Warning: Unknown columns: `theor.min`, `theor.max` ## scale = -2.821021855 ## scale = -20.77809987 ## scale = -3.300648313 variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_water_sat_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000424 already exists. Parameters look different. Old: lnorm(0.0200, 0.6100) New: lnorm(0.0100, 0.6000)&quot; wood_water_sat_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_water_sat_prior_id) %&gt;% collect() wood_water_sat_prior &lt;- rdistn(wood_water_sat_fit) wood_water_sat_density &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_water_sat&quot;) prior_plot(prior = wood_water_sat_prior, q = c(0,.995), plot_default = wood_water_sat_density, title = sprintf(&quot;Wood water content at saturation (wood_water_sat): %s&quot;, wood_water_sat_fit$distn), type = &quot;mixed&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). [wood_psi_tlp]: Sapwood water potential at turgor loss point ED ED variable name: wood_psi_tlp ED variable units: m BETY Variable id: `` Prior id: `` NOTE!! The units are NEGATIVE in the database so we can calculate a distribution that is entirely negative. Calculation Expert elicitation No expert elicitation provided by Brad Christoffersen. There is a FATES parameter but it is calculated from other parameters FATES variable name: pitlp_node FATES variable units: MPa Constraints we added - wood_psi_tlp &gt; .1 MPa (this was given as a boundary for other psi variables) Conversion Calculated from other parameters: wood_psi_osmotic and wood_elastic_mod Remember that wood_elastic_mod is MPa, where everything else is m! Code wood_psi_tlp_samp = (wood_psi_osmotic_prior * wood_elastic_mod_prior * MPa2m)/ (wood_psi_osmotic_prior + wood_elastic_mod_prior * MPa2m) wood_psi_tlp_samp &lt;- (wood_psi_osmotic_prior * wood_elastic_mod_prior * MPa2m)/ (wood_psi_osmotic_prior + wood_elastic_mod_prior * MPa2m) summary(wood_psi_tlp_samp) ## Min. 1st Qu. Median Mean 3rd Qu. ## -583188.9602 -324.9902 -231.3337 -206.4048 -152.9874 ## Max. ## 3153302.7981 i &lt;- which(priors$ED_name == &quot;wood_psi_tlp&quot;) prior_in &lt;- priors[i,stats] * MPa2m # Convert from MPa to m prior_in &lt;- prior_add_samp_data(prior_in, samp = -wood_psi_tlp_samp) prior_in[,stats] ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 10.19716213 50.9870407 152.9873839 231.3337159 324.9902341 608.280544 ## theor.max ## 1 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;wood_psi_tlp&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_psi_tlp_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000416 already exists. Parameters look different. Old: lnorm(5.4300, 0.5500) New: lnorm(5.4200, 0.5500)&quot; wood_psi_tlp_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_psi_tlp_prior_id) %&gt;% collect() wood_psi_tlp_prior &lt;- -rdistn(wood_psi_tlp_fit) # Remember to flip back over for psi wood_psi_tlp_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_psi_tlp&quot;) prior_plot(prior = wood_psi_tlp_prior, q = c(.005,1), plot_default = wood_psi_tlp_default, title = sprintf(&quot;(wood_psi_tlp): %s&quot;, wood_psi_tlp_fit$distn), type = &quot;mixed&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). [wood_water_cap]: Wood hydaulic capacitance ED ED variable name : wood_water_cap ED variable units: kg H2O/kg biomass/m BETY Different units in BETY so we can fit a distribution! The numbers were so small that I couldn’t get the fitting function to work until I scaled the variable up! BETY varaible units: g H2O / kg biomass / m Calculation Expert elicitation No expert elicitation provided by Brad Christoffersen. Constraints we added - wood_water_cap &gt; 1e-07 kg H2O/kg biomass/m Code wood_water_cap_samp &lt;- 1000 * (1/wood_density_prior) * (1 - wood_psi_osmotic_prior / (4 * wood_psi_tlp_prior)) * (wood_water_sat_prior / (4 * abs(wood_psi_tlp_prior))) summary(wood_water_cap_samp) ## Min. 1st Qu. Median Mean 3rd Qu. ## -443.2473370 0.7613106 1.4394961 2.3685969 2.8189017 ## Max. ## 91.0701334 i &lt;- which(priors$ED_name == &quot;wood_water_cap&quot;) prior_in &lt;- priors[i,stats] prior_in &lt;- prior_add_samp_data(prior_in, samp = wood_water_cap_samp) prior_in[,stats] ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.0000001 0.200 0.761 1.44 2.82 10.8 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;wood_water_cap&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_water_cap_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000417 already exists. Parameters look different. Old: lnorm(0.3800, 0.9800) New: lnorm(0.3700, 0.9800)&quot; wood_water_cap_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_water_cap_prior_id) %&gt;% collect() wood_water_cap_prior &lt;- rdistn(wood_water_cap_fit) * (1/1000) # Convert back to kg wood_water_cap_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_water_cap&quot;) prior_plot(prior = wood_water_cap_prior, plot_default = wood_water_cap_default, title = sprintf(&quot;(wood_water_cap): %s&quot;, wood_water_cap_fit$distn), type = &quot;mixed&quot;) + geom_vline(aes(xintercept = 10/MPa2m * (1/1000)), color = &quot;gray&quot;) + geom_vline(aes(xintercept = 100/MPa2m * (1/1000)), color = &quot;gray&quot;) + geom_vline(aes(xintercept = 300/MPa2m * (1/1000)), color = &quot;gray&quot;) + geom_vline(aes(xintercept = 900/MPa2m * (1/1000)), color = &quot;gray&quot;) + xlim(0, .009) ## Warning: Removed 3056 rows containing non-finite values (stat_density). 900/MPa2m * (1/1000) &lt; max(wood_water_cap_prior) ## [1] TRUE [wood_psi_min]: Sapwood minimum relative water content or Sapwood residual fraction ED ED variable name : wood_psi_min Ed variable units: m BETY Negative units in BETY so we can fit a distribution! BETY varaible units: -m Calculation Expert elicitation There are no FATES parameters Constraints we added - wood_psi_min &gt; .1 MPa (this was given as a boundary for other psi variables) Code Calculated from other priors. Should I put wood_rwc_min and rwc_tlp_wood in the database too? rwc_tlp_wood_samp &lt;- 1. - (1. - 0.75 * wood_density_prior) / (2.74 + 2.01 * wood_density_prior) wood_rwc_min_samp = wood_elastic_mod_prior * (1. - rwc_tlp_wood_samp) / (wood_psi_osmotic_prior / MPa2m) + 1. wood_psi_min_samp = (wood_rwc_min_samp - 1.) * wood_water_sat_prior / wood_water_cap_prior # Add in the max an min from the priors table i &lt;- which(priors$ED_name == &quot;wood_psi_min&quot;) prior_in &lt;- priors[i,stats] * MPa2m # Convert from MPa to m prior_in &lt;- prior_add_samp_data(prior_in, samp = -wood_psi_min_samp) prior_in[,stats] ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 10.19716213 46.15737233 325.7722598 904.937816 2510.255024 17496.71352 ## theor.max ## 1 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;wood_psi_min&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_psi_min_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000419 already exists. Parameters look different. Old: lnorm(6.8100, 1.5200) New: lnorm(6.8100, 1.5100)&quot; wood_psi_min_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_psi_min_prior_id) %&gt;% collect() wood_psi_min_prior &lt;- -rdistn(wood_psi_min_fit) # Remember to flip psi default_wood_psi_min &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_psi_min&quot;) prior_plot(prior = wood_psi_min_prior, q = c(.025,1), plot_default = default_wood_psi_min, title = sprintf(&quot;wood_psi_min: %s&quot;, wood_psi_min_fit$distn), type = &quot;mixed&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). [wood_Kmax]: Maximum hydraulic conductivity of the stem ED ED variable name : wood_Kmax ED variable units: kg H2O / m / s Note! This is the only case in which MPa is used instead of m! BETY Calculation Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: kmax_node FATES variable units: kg m-1 s-1 MPa-1 Conversion I don’t think we need to multiply by the density of water … which is confusing. Code i &lt;- which(priors$ED_name == &quot;wood_Kmax&quot;) prior_in &lt;- priors[i, stats] / MPa2m myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) myfit$score$dist[which.min(myfit$score$RMSE)] ## [1] &quot;exp&quot; variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; # In this case, the exponential function is the best fit, # but I&#39;m going to choose the beta function because it is much easier to deal # with in the meta analysis. This could be wrong and we may need to return to it. # best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.name &lt;- &quot;beta&quot; best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_Kmax_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000430 already exists. Parameters look the same. Old: beta(0.7200, 21.9500) New: beta(0.7200, 21.9500)&quot; wood_Kmax_prior_id &lt;- wood_Kmax_prior_id[1] wood_Kmax_fit &lt;- pfts_priors %&gt;% filter(var_name == &quot;wood_Kmax&quot;) %&gt;% select(one_of(&quot;distn&quot;, &quot;parama&quot;, &quot;paramb&quot;)) wood_Kmax_prior &lt;- rdistn(wood_Kmax_fit) # NOTE: Need to convert to m from -m wood_Kmax_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_Kmax&quot;) prior_plot(prior = wood_Kmax_prior, q = c(0,.975), plot_default = wood_Kmax_default, title = sprintf(&quot;Maximum hydraulic conductivity of the stem (wood_Kmax): %s&quot;, wood_Kmax_fit$distn), type = &quot;elic&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). [wood_psi50]: Water potential at which 50% of stem conductivity is lost ED ED variable name : wood_psi50 ED variable units: m BETY Negative units in BETY so we can fit a distribution! BETY varaible units: -m Calculation NOTE: There is an ERROR in the ED code for the equation for wood_psi50 Should be: (-1.09-(3.57 * rho(ipft) ^ 1.73) * MPa2m This one is tricky, do we keep the normal distribution because it’s the best fit? Expert elicitation FATES varaiable name: p50_node (stem) FATES variable units: MPa Conversion MPa to m Code Using the best fit norm i &lt;- which(priors$ED_name == &quot;wood_psi50&quot;) prior_in &lt;- priors[i, stats] * MPa2m prior_in ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 10.19716213 50.98581065 101.9716213 NA 407.8864852 611.8297278 ## theor.max ## 1 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) myfit$score$dist[which.min(myfit$score$RMSE)] ## [1] &quot;norm&quot; variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_psi50_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000360 already exists. Parameters look the same. Old: norm(284.6500, 176.3200) New: norm(284.6500, 176.3200)&quot; wood_psi50_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_psi50_prior_id) %&gt;% collect() wood_psi50_prior &lt;- -rdistn(wood_psi50_fit) # NOTE: Need to convert to m from -m # Calculating default by hand because it is calculated wrong in ED! wood_psi50_default &lt;- (-1.09 - (3.57 * wood_density_default ^ 1.73)) * MPa2m wrong_wood_psi50_default &lt;- get_ED_default(PFT3_defaults_history, &quot;wood_psi50&quot;) p &lt;- prior_plot(prior = wood_psi50_prior, q = c(0,1), plot_default = wood_psi50_default, title = sprintf(&quot;Water potential at which 50perc. of stem cond. is lost (wood_psi50): %s&quot;, wood_psi50_fit$distn), type = &quot;elic&quot;) p + geom_vline(aes(xintercept = wrong_wood_psi50_default), color = &quot;gray&quot;, linetype = &quot;dashed&quot;) + geom_vline(aes(xintercept = quantile(wood_psi50_prior, .975)), color = &quot;blue&quot;, linetype = &quot;dashed&quot;) quantile(wood_psi50_prior, .975) ## 97.5% ## 60.96510023 A positive number is within the 95% CI of the distribution so in this case, I’m going to choose a log normal distriburtion even though it is not the best fit. Hopefully this can also be fixed given that we have data for both psi50 and Kexp… Using more realistic lnorm best.fit.name &lt;- &quot;lnorm&quot; best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_psi50_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000420 already exists. Parameters look the same. Old: lnorm(5.2800, 0.8500) New: lnorm(5.2800, 0.8500)&quot; wood_psi50_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_psi50_prior_id) %&gt;% collect() wood_psi50_prior &lt;- -rdistn(wood_psi50_fit) # NOTE: Need to convert to m from -m # Calculating default by hand because it is calculated wrong in ED! wood_psi50_default &lt;- (-1.09 - (3.57 * wood_density_default ^ 1.73)) * MPa2m wrong_wood_psi50_default &lt;- get_ED_default(PFT3_defaults_history, &quot;wood_psi50&quot;) prior_plot(prior = wood_psi50_prior, q = c(0.025,1), plot_default = wood_psi50_default, title = sprintf(&quot;Water potential at which 50perc. of stem cond. is lost (wood_psi50): %s&quot;, wood_psi50_fit$distn), type = &quot;elic&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). [ax]: Slope of xylem vulnerability curve at P50 ED Not in ED, but will be used to calculate Kexp. BETY Calculation Expert elicitation Expert elicitation provided by Brad Christoffersen FATES varaiable name: avuln_node (stem) FATES variable units: unitless Conversion None! Code i &lt;- which(priors$Christoffersen_name == &quot;avuln_node&quot;) prior_in &lt;- priors[i, stats] prior_in ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.1 1 10 NA 100 200 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) myfit$score$dist[which.min(myfit$score$RMSE)] ## [1] &quot;exp&quot; variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == &quot;ax&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_ax_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000421 already exists. Parameters look the same. Old: exp(0.0200) New: exp(0.0200)&quot; wood_ax_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_ax_prior_id) %&gt;% collect() wood_ax_prior &lt;- rdistn(wood_ax_fit) prior_plot(prior = wood_ax_prior, q = c(0,.975), title = sprintf(&quot;Slope of xylem vulnerability curve at P50: %s&quot;, wood_ax_fit$distn), type = &quot;elic&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). [wood_Kexp]: Exponent for the hydraulic vulnerability curve of stem conductivity … under the Weibull function 1/(1+(psi/psi50) ^ Kexp_stem) ED ED variable name : wood_Kexp ED variable units: unitless BETY Calculation Kexp = -ax * 4 * p50 / 100 Expert elicitation None Conversion None! Code wood_Kexp_samp &lt;- - wood_ax_prior * 4 * (wood_psi50_prior/MPa2m) / 100 summary(wood_Kexp_samp) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000118 0.8817981 2.4826389 5.5365974 6.1703259 390.1026614 i &lt;- which(priors$ED_name == &quot;wood_Kexp&quot;) prior_in &lt;- priors[i,stats] prior_in &lt;- prior_add_samp_data(prior_in, samp = wood_Kexp_samp) prior_in[,stats] ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 NA 0.0686 0.882 2.48 6.17 29.9 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) myfit$score$dist[which.min(myfit$score$RMSE)] ## [1] &quot;lnorm&quot; variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_Kexp_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000426 already exists. Parameters look the same. Old: lnorm(0.8700, 1.4300) New: lnorm(0.8700, 1.4300)&quot; wood_Kexp_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_Kexp_prior_id) %&gt;% collect() wood_Kexp_prior &lt;- rdistn(wood_Kexp_fit) # Calculating default by hand because psi50 is calculated wrong in ED! wood_Kexp_default &lt;- 0.544 * 4. * (-wood_psi50_default / MPa2m) ^ (-0.17) wrong_wood_Kexp_default &lt;- get_ED_default(PFT3_defaults_history, &quot;wood_Kexp&quot;) p &lt;- prior_plot(prior = wood_Kexp_prior, q = c(0,.975), plot_default = wood_Kexp_default, title = sprintf(&quot;Water potential at which 50perc. of stem cond. is lost (wood_Kexp): %s&quot;, wood_Kexp_fit$distn), type = &quot;equation&quot;) p + geom_vline(aes(xintercept = wrong_wood_Kexp_default), color = &quot;gray&quot;, linetype = &quot;dashed&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). Note: here the miscalculation of psi50 in the code barely shows up because the value is divided by a large number. "]
]
